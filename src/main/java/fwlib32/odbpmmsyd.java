package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbpmmsyd extends Structure {
	public byte[] system = new byte[2];
	public byte[] model = new byte[2];
	/** serise */
	public byte[] series = new byte[4];
	/** version */
	public byte[] edition = new byte[4];
	public odbpmmsyd() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("system", "model", "series", "edition");
	}
	public odbpmmsyd(byte system[], byte model[], byte series[], byte edition[]) {
		super();
		if ((system.length != this.system.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.system = system;
		if ((model.length != this.model.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.model = model;
		if ((series.length != this.series.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.series = series;
		if ((edition.length != this.edition.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.edition = edition;
	}
	public odbpmmsyd(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbpmmsyd implements Structure.ByReference {
		
	};
	public static class ByValue extends odbpmmsyd implements Structure.ByValue {
		
	};
}
