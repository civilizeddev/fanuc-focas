package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OUT_FLNTENTRY extends Structure {
	public byte Node;
	public byte[] Reserved = new byte[3];
	public NativeLong[] EntryNode = new NativeLong[8];
	public OUT_FLNTENTRY() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Node", "Reserved", "EntryNode");
	}
	public OUT_FLNTENTRY(byte Node, byte Reserved[], NativeLong EntryNode[]) {
		super();
		this.Node = Node;
		if ((Reserved.length != this.Reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Reserved = Reserved;
		if ((EntryNode.length != this.EntryNode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.EntryNode = EntryNode;
	}
	public OUT_FLNTENTRY(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends OUT_FLNTENTRY implements Structure.ByReference {
		
	};
	public static class ByValue extends OUT_FLNTENTRY implements Structure.ByValue {
		
	};
}
