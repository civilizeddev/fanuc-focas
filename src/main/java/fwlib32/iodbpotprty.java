package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbpotprty extends Structure {
	public short tool_no;
	public short pot_type;
	public byte pot_info1;
	public byte pot_info2;
	public byte[] reserve = new byte[2];
	public NativeLong[] cstm = new NativeLong[10];
	public iodbpotprty() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("tool_no", "pot_type", "pot_info1", "pot_info2", "reserve", "cstm");
	}
	public iodbpotprty(short tool_no, short pot_type, byte pot_info1, byte pot_info2, byte reserve[], NativeLong cstm[]) {
		super();
		this.tool_no = tool_no;
		this.pot_type = pot_type;
		this.pot_info1 = pot_info1;
		this.pot_info2 = pot_info2;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
		if ((cstm.length != this.cstm.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cstm = cstm;
	}
	public iodbpotprty(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbpotprty implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbpotprty implements Structure.ByValue {
		
	};
}
