package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbdncdgn2 extends Structure {
	public short ctrl_word;
	public short can_word;
	public byte[] nc_file = new byte[64];
	public short read_ptr;
	public short write_ptr;
	public short empty_cnt;
	public NativeLong total_size;
	public odbdncdgn2() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ctrl_word", "can_word", "nc_file", "read_ptr", "write_ptr", "empty_cnt", "total_size");
	}
	public odbdncdgn2(short ctrl_word, short can_word, byte nc_file[], short read_ptr, short write_ptr, short empty_cnt, NativeLong total_size) {
		super();
		this.ctrl_word = ctrl_word;
		this.can_word = can_word;
		if ((nc_file.length != this.nc_file.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.nc_file = nc_file;
		this.read_ptr = read_ptr;
		this.write_ptr = write_ptr;
		this.empty_cnt = empty_cnt;
		this.total_size = total_size;
	}
	public odbdncdgn2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbdncdgn2 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbdncdgn2 implements Structure.ByValue {
		
	};
}
