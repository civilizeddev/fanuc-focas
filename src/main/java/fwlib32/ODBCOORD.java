package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ODBCOORD extends Structure {
	public NativeLong[] orign = new NativeLong[3];
	public short[] vec_x = new short[3];
	public short[] vec_y = new short[3];
	public short[] vec_z = new short[3];
	public ODBCOORD() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("orign", "vec_x", "vec_y", "vec_z");
	}
	public ODBCOORD(NativeLong orign[], short vec_x[], short vec_y[], short vec_z[]) {
		super();
		if ((orign.length != this.orign.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.orign = orign;
		if ((vec_x.length != this.vec_x.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.vec_x = vec_x;
		if ((vec_y.length != this.vec_y.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.vec_y = vec_y;
		if ((vec_z.length != this.vec_z.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.vec_z = vec_z;
	}
	public ODBCOORD(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ODBCOORD implements Structure.ByReference {
		
	};
	public static class ByValue extends ODBCOORD implements Structure.ByValue {
		
	};
}
