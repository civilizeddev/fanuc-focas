package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbprfcnf extends Structure {
	public byte[] master_ser = new byte[5];
	public byte[] master_ver = new byte[3];
	public byte[] slave_ser = new byte[5];
	public byte[] slave_ver = new byte[3];
	public byte[] cntl_ser = new byte[5];
	public byte[] cntl_ver = new byte[3];
	public odbprfcnf() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("master_ser", "master_ver", "slave_ser", "slave_ver", "cntl_ser", "cntl_ver");
	}
	public odbprfcnf(byte master_ser[], byte master_ver[], byte slave_ser[], byte slave_ver[], byte cntl_ser[], byte cntl_ver[]) {
		super();
		if ((master_ser.length != this.master_ser.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.master_ser = master_ser;
		if ((master_ver.length != this.master_ver.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.master_ver = master_ver;
		if ((slave_ser.length != this.slave_ser.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.slave_ser = slave_ser;
		if ((slave_ver.length != this.slave_ver.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.slave_ver = slave_ver;
		if ((cntl_ser.length != this.cntl_ser.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cntl_ser = cntl_ser;
		if ((cntl_ver.length != this.cntl_ver.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cntl_ver = cntl_ver;
	}
	public odbprfcnf(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbprfcnf implements Structure.ByReference {
		
	};
	public static class ByValue extends odbprfcnf implements Structure.ByValue {
		
	};
}
