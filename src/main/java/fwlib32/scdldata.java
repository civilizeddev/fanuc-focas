package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class scdldata extends Structure {
	public short file_no;
	public byte[] file_name = new byte[16];
	public short repeat_num;
	public short current_num;
	public byte[] dummy = new byte[2];
	public scdldata() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("file_no", "file_name", "repeat_num", "current_num", "dummy");
	}
	public scdldata(short file_no, byte file_name[], short repeat_num, short current_num, byte dummy[]) {
		super();
		this.file_no = file_no;
		if ((file_name.length != this.file_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.file_name = file_name;
		this.repeat_num = repeat_num;
		this.current_num = current_num;
		if ((dummy.length != this.dummy.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dummy = dummy;
	}
	public scdldata(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends scdldata implements Structure.ByReference {
		
	};
	public static class ByValue extends scdldata implements Structure.ByValue {
		
	};
}
