package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbmsudat extends Structure {
	public tag_ODBMSUINF inf;
	public tag_ODBMSUXTERM[] x_term = new tag_ODBMSUXTERM[16];
	public tag_ODBMSUYTERM[] y_term = new tag_ODBMSUYTERM[16];
	public odbmsudat() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("inf", "x_term", "y_term");
	}
	public odbmsudat(tag_ODBMSUINF inf, tag_ODBMSUXTERM x_term[], tag_ODBMSUYTERM y_term[]) {
		super();
		this.inf = inf;
		if ((x_term.length != this.x_term.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.x_term = x_term;
		if ((y_term.length != this.y_term.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.y_term = y_term;
	}
	public odbmsudat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbmsudat implements Structure.ByReference {
		
	};
	public static class ByValue extends odbmsudat implements Structure.ByValue {
		
	};
}
