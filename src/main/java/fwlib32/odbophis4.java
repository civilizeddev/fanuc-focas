package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbophis4 extends Structure {
	/** length */
	public short rec_len;
	/** record type */
	public short rec_type;
	public u_union u;
	public static class u_union extends Union {
		public rec_mdi_struct rec_mdi;
		public rec_sgn_struct rec_sgn;
		public rec_alm_struct rec_alm;
		public rec_date_struct rec_date;
		public rec_ial_struct rec_ial;
		public rec_mal_struct rec_mal;
		/** opm */
		public rec_opm_struct rec_opm;
		public rec_ofs_struct rec_ofs;
		public rec_prm_struct rec_prm;
		public rec_wof_struct rec_wof;
		public rec_mac_struct rec_mac;
		public rec_mac2_struct rec_mac2;
		public rec_scrn_struct rec_scrn;
		public static class rec_mdi_struct extends Structure {
			/** key code */
			public byte key_code;
			/** power on flag */
			public byte pw_flag;
			/** path index */
			public short pth_no;
			/** kxternal key flag */
			public short ex_flag;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			public rec_mdi_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("key_code", "pw_flag", "pth_no", "ex_flag", "hour", "minute", "second");
			}
			public rec_mdi_struct(byte key_code, byte pw_flag, short pth_no, short ex_flag, short hour, short minute, short second) {
				super();
				this.key_code = key_code;
				this.pw_flag = pw_flag;
				this.pth_no = pth_no;
				this.ex_flag = ex_flag;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
			}
			public rec_mdi_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mdi_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mdi_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_sgn_struct extends Structure {
			/** signal name */
			public short sig_name;
			/** signal number */
			public short sig_no;
			/** old signal bit pattern */
			public byte sig_old;
			/** new signal bit pattern */
			public byte sig_new;
			/** pmc index */
			public short pmc_no;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			public short dummy;
			public rec_sgn_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("sig_name", "sig_no", "sig_old", "sig_new", "pmc_no", "hour", "minute", "second", "dummy");
			}
			public rec_sgn_struct(short sig_name, short sig_no, byte sig_old, byte sig_new, short pmc_no, short hour, short minute, short second, short dummy) {
				super();
				this.sig_name = sig_name;
				this.sig_no = sig_no;
				this.sig_old = sig_old;
				this.sig_new = sig_new;
				this.pmc_no = pmc_no;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				this.dummy = dummy;
			}
			public rec_sgn_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_sgn_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_sgn_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_alm_struct extends Structure {
			/** alarm group */
			public short alm_grp;
			/** alarm number */
			public short alm_no;
			/** axis number */
			public short axis_no;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			public rec_alm_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("alm_grp", "alm_no", "axis_no", "year", "month", "day", "hour", "minute", "second", "pth_no");
			}
			public rec_alm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_alm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_alm_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_date_struct extends Structure {
			/** event type */
			public short evnt_type;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			public short dummy;
			public rec_date_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("evnt_type", "year", "month", "day", "hour", "minute", "second", "dummy");
			}
			public rec_date_struct(short evnt_type, short year, short month, short day, short hour, short minute, short second, short dummy) {
				super();
				this.evnt_type = evnt_type;
				this.year = year;
				this.month = month;
				this.day = day;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				this.dummy = dummy;
			}
			public rec_date_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_date_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_date_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_ial_struct extends Structure {
			/** alarm group */
			public short alm_grp;
			/** alarm number */
			public short alm_no;
			/** axis number */
			public short axis_no;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			/** sys alarm */
			public short sys_alm;
			/** message dsp flag */
			public short dsp_flg;
			/** axis num */
			public short axis_num;
			public short dummy1;
			/** G code Modal */
			public NativeLong[] g_modal = new NativeLong[10];
			/** #7:1 Block */
			public byte[] g_dp = new byte[10];
			public short dummy2;
			/** B,D,E,F,H,M,N,O,S,T code Modal */
			public NativeLong[] a_modal = new NativeLong[10];
			/** #7:1 Block */
			public byte[] a_dp = new byte[10];
			public short dummy3;
			/** Abs pos */
			public NativeLong[] abs_pos = new NativeLong[32];
			/** Abs dp */
			public byte[] abs_dp = new byte[32];
			/** Mcn pos */
			public NativeLong[] mcn_pos = new NativeLong[32];
			/** Mcn dp */
			public byte[] mcn_dp = new byte[32];
			public rec_ial_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("alm_grp", "alm_no", "axis_no", "year", "month", "day", "hour", "minute", "second", "pth_no", "sys_alm", "dsp_flg", "axis_num", "dummy1", "g_modal", "g_dp", "dummy2", "a_modal", "a_dp", "dummy3", "abs_pos", "abs_dp", "mcn_pos", "mcn_dp");
			}
			public rec_ial_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_ial_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_ial_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_mal_struct extends Structure {
			/** alarm group */
			public short alm_grp;
			/** alarm number */
			public short alm_no;
			/** axis number */
			public short axis_no;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			/** sys alarm */
			public short sys_alm;
			/** message dsp flag */
			public short dsp_flg;
			/** axis num */
			public short axis_num;
			/** alarm message */
			public byte[] alm_msg = new byte[64];
			public short dummy1;
			/** G code Modal */
			public NativeLong[] g_modal = new NativeLong[10];
			/** #7:1 Block */
			public byte[] g_dp = new byte[10];
			public short dummy2;
			/** B,D,E,F,H,M,N,O,S,T code Modal */
			public NativeLong[] a_modal = new NativeLong[10];
			/** #7:1 Block */
			public byte[] a_dp = new byte[10];
			public short dummy3;
			/** Abs pos */
			public NativeLong[] abs_pos = new NativeLong[32];
			/** Abs dp */
			public byte[] abs_dp = new byte[32];
			/** Mcn pos */
			public NativeLong[] mcn_pos = new NativeLong[32];
			/** Mcn dp */
			public byte[] mcn_dp = new byte[32];
			public rec_mal_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("alm_grp", "alm_no", "axis_no", "year", "month", "day", "hour", "minute", "second", "pth_no", "sys_alm", "dsp_flg", "axis_num", "alm_msg", "dummy1", "g_modal", "g_dp", "dummy2", "a_modal", "a_dp", "dummy3", "abs_pos", "abs_dp", "mcn_pos", "mcn_dp");
			}
			public rec_mal_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mal_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mal_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_opm_struct extends Structure {
			/** Dysplay flag(ON/OFF) */
			public short dsp_flg;
			/** message number */
			public short om_no;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** Hour */
			public short hour;
			/** Minute */
			public short minute;
			/** Second */
			public short second;
			/** Messege */
			public byte[] ope_msg = new byte[256];
			public rec_opm_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("dsp_flg", "om_no", "year", "month", "day", "hour", "minute", "second", "ope_msg");
			}
			public rec_opm_struct(short dsp_flg, short om_no, short year, short month, short day, short hour, short minute, short second, byte ope_msg[]) {
				super();
				this.dsp_flg = dsp_flg;
				this.om_no = om_no;
				this.year = year;
				this.month = month;
				this.day = day;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				if ((ope_msg.length != this.ope_msg.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.ope_msg = ope_msg;
			}
			public rec_opm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_opm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_opm_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_ofs_struct extends Structure {
			/** Tool offset group */
			public short ofs_grp;
			/** Tool offset number */
			public short ofs_no;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			/** old data */
			public NativeLong ofs_old;
			/** new data */
			public NativeLong ofs_new;
			/** old data decimal point */
			public short old_dp;
			/** new data decimal point */
			public short new_dp;
			public rec_ofs_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("ofs_grp", "ofs_no", "hour", "minute", "second", "pth_no", "ofs_old", "ofs_new", "old_dp", "new_dp");
			}
			public rec_ofs_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_ofs_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_ofs_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_prm_struct extends Structure {
			/** paramater group */
			public short prm_grp;
			/** paramater number */
			public short prm_num;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** paramater data length */
			public short prm_len;
			/** paramater no */
			public NativeLong prm_no;
			/** old data */
			public NativeLong prm_old;
			/** new data */
			public NativeLong prm_new;
			/** old data decimal point */
			public short old_dp;
			/** new data decimal point */
			public short new_dp;
			public rec_prm_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("prm_grp", "prm_num", "hour", "minute", "second", "prm_len", "prm_no", "prm_old", "prm_new", "old_dp", "new_dp");
			}
			public rec_prm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_prm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_prm_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_wof_struct extends Structure {
			/** Work offset group */
			public short ofs_grp;
			/** Work offset number */
			public short ofs_no;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			/** path axis num $ */
			public short axis_no;
			public short dummy;
			/** old data */
			public NativeLong ofs_old;
			/** new data */
			public NativeLong ofs_new;
			/** old data decimal point */
			public short old_dp;
			/** new data decimal point */
			public short new_dp;
			public rec_wof_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("ofs_grp", "ofs_no", "hour", "minute", "second", "pth_no", "axis_no", "dummy", "ofs_old", "ofs_new", "old_dp", "new_dp");
			}
			public rec_wof_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_wof_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_wof_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_mac_struct extends Structure {
			/** macro val number */
			public short mac_no;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			public short dummy;
			/** old data */
			public NativeLong mac_old;
			/** new data */
			public NativeLong mac_new;
			/** old data decimal point */
			public short old_dp;
			/** old data decimal point */
			public short new_dp;
			public rec_mac_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mac_no", "hour", "minute", "second", "pth_no", "dummy", "mac_old", "mac_new", "old_dp", "new_dp");
			}
			public rec_mac_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mac_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mac_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_mac2_struct extends Structure {
			/** macro val number(expand) */
			public NativeLong mac_no;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			/** old data */
			public NativeLong mac_old;
			/** new data */
			public NativeLong mac_new;
			/** old data decimal point */
			public short old_dp;
			/** old data decimal point */
			public short new_dp;
			public rec_mac2_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mac_no", "hour", "minute", "second", "pth_no", "mac_old", "mac_new", "old_dp", "new_dp");
			}
			public rec_mac2_struct(NativeLong mac_no, short hour, short minute, short second, short pth_no, NativeLong mac_old, NativeLong mac_new, short old_dp, short new_dp) {
				super();
				this.mac_no = mac_no;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				this.pth_no = pth_no;
				this.mac_old = mac_old;
				this.mac_new = mac_new;
				this.old_dp = old_dp;
				this.new_dp = new_dp;
			}
			public rec_mac2_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mac2_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mac2_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_scrn_struct extends Structure {
			/** old screen nubmer */
			public short scrn_old;
			/** new screen nubmer */
			public short scrn_new;
			public short dummy;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			public rec_scrn_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("scrn_old", "scrn_new", "dummy", "hour", "minute", "second");
			}
			public rec_scrn_struct(short scrn_old, short scrn_new, short dummy, short hour, short minute, short second) {
				super();
				this.scrn_old = scrn_old;
				this.scrn_new = scrn_new;
				this.dummy = dummy;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
			}
			public rec_scrn_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_scrn_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_scrn_struct implements Structure.ByValue {
				
			};
		};
		public u_union() {
			super();
		}
		public u_union(rec_mdi_struct rec_mdi) {
			super();
			this.rec_mdi = rec_mdi;
			setType(rec_mdi_struct.class);
		}
		public u_union(rec_sgn_struct rec_sgn) {
			super();
			this.rec_sgn = rec_sgn;
			setType(rec_sgn_struct.class);
		}
		public u_union(rec_alm_struct rec_alm) {
			super();
			this.rec_alm = rec_alm;
			setType(rec_alm_struct.class);
		}
		public u_union(rec_date_struct rec_date) {
			super();
			this.rec_date = rec_date;
			setType(rec_date_struct.class);
		}
		public u_union(rec_ial_struct rec_ial) {
			super();
			this.rec_ial = rec_ial;
			setType(rec_ial_struct.class);
		}
		public u_union(rec_mal_struct rec_mal) {
			super();
			this.rec_mal = rec_mal;
			setType(rec_mal_struct.class);
		}
		public u_union(rec_opm_struct rec_opm) {
			super();
			this.rec_opm = rec_opm;
			setType(rec_opm_struct.class);
		}
		public u_union(rec_ofs_struct rec_ofs) {
			super();
			this.rec_ofs = rec_ofs;
			setType(rec_ofs_struct.class);
		}
		public u_union(rec_prm_struct rec_prm) {
			super();
			this.rec_prm = rec_prm;
			setType(rec_prm_struct.class);
		}
		public u_union(rec_wof_struct rec_wof) {
			super();
			this.rec_wof = rec_wof;
			setType(rec_wof_struct.class);
		}
		public u_union(rec_mac_struct rec_mac) {
			super();
			this.rec_mac = rec_mac;
			setType(rec_mac_struct.class);
		}
		public u_union(rec_mac2_struct rec_mac2) {
			super();
			this.rec_mac2 = rec_mac2;
			setType(rec_mac2_struct.class);
		}
		public u_union(rec_scrn_struct rec_scrn) {
			super();
			this.rec_scrn = rec_scrn;
			setType(rec_scrn_struct.class);
		}
		public u_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends u_union implements Structure.ByReference {
			
		};
		public static class ByValue extends u_union implements Structure.ByValue {
			
		};
	};
	public odbophis4() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("rec_len", "rec_type", "u");
	}
	public odbophis4(short rec_len, short rec_type, u_union u) {
		super();
		this.rec_len = rec_len;
		this.rec_type = rec_type;
		this.u = u;
	}
	public odbophis4(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbophis4 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbophis4 implements Structure.ByValue {
		
	};
}
