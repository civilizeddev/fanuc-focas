package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbindexprm extends Structure {
	public NativeLong ofs_limit;
	public NativeLong detect_width;
	public short[] jog_clamp = new short[3];
	public byte matrix_single;
	public byte torque_ovr;
	public byte ofs_adjust;
	public byte[] dummy = new byte[3];
	public iodbindexprm() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ofs_limit", "detect_width", "jog_clamp", "matrix_single", "torque_ovr", "ofs_adjust", "dummy");
	}
	public iodbindexprm(NativeLong ofs_limit, NativeLong detect_width, short jog_clamp[], byte matrix_single, byte torque_ovr, byte ofs_adjust, byte dummy[]) {
		super();
		this.ofs_limit = ofs_limit;
		this.detect_width = detect_width;
		if ((jog_clamp.length != this.jog_clamp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.jog_clamp = jog_clamp;
		this.matrix_single = matrix_single;
		this.torque_ovr = torque_ovr;
		this.ofs_adjust = ofs_adjust;
		if ((dummy.length != this.dummy.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dummy = dummy;
	}
	public iodbindexprm(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbindexprm implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbindexprm implements Structure.ByValue {
		
	};
}
