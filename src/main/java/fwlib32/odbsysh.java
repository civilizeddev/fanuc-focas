package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbsysh extends Structure {
	public NativeLong id1;
	public NativeLong id2;
	public short group_id;
	public short hard_id;
	public short hard_num;
	public short slot_no;
	public short id1_format;
	public short id2_format;
	public odbsysh() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("id1", "id2", "group_id", "hard_id", "hard_num", "slot_no", "id1_format", "id2_format");
	}
	public odbsysh(NativeLong id1, NativeLong id2, short group_id, short hard_id, short hard_num, short slot_no, short id1_format, short id2_format) {
		super();
		this.id1 = id1;
		this.id2 = id2;
		this.group_id = group_id;
		this.hard_id = hard_id;
		this.hard_num = hard_num;
		this.slot_no = slot_no;
		this.id1_format = id1_format;
		this.id2_format = id2_format;
	}
	public odbsysh(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbsysh implements Structure.ByReference {
		
	};
	public static class ByValue extends odbsysh implements Structure.ByValue {
		
	};
}
