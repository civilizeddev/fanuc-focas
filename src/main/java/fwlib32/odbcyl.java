package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbcyl extends Structure {
	/** start point */
	public NativeLong[] sta_pnt = new NativeLong[3];
	/** end point */
	public NativeLong[] end_pnt = new NativeLong[3];
	/** radius */
	public NativeLong radius;
	/** numetrical unit */
	public byte n_unit;
	/** figure form flag */
	public byte cb_form;
	public odbcyl() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("sta_pnt", "end_pnt", "radius", "n_unit", "cb_form");
	}
	public odbcyl(NativeLong sta_pnt[], NativeLong end_pnt[], NativeLong radius, byte n_unit, byte cb_form) {
		super();
		if ((sta_pnt.length != this.sta_pnt.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.sta_pnt = sta_pnt;
		if ((end_pnt.length != this.end_pnt.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.end_pnt = end_pnt;
		this.radius = radius;
		this.n_unit = n_unit;
		this.cb_form = cb_form;
	}
	public odbcyl(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbcyl implements Structure.ByReference {
		
	};
	public static class ByValue extends odbcyl implements Structure.ByValue {
		
	};
}
