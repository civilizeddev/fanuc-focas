package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IN_FLNTPRM extends Structure {
	public byte[] OwnIpAddress = new byte[40];
	public byte[] NodeName = new byte[12];
	public short Area1CmnMemAddr;
	public short Area1CmnMemSize;
	public short Area2CmnMemAddr;
	public short Area2CmnMemSize;
	public byte TokenWatch;
	public byte MinFrame;
	public byte[] Reserved0 = new byte[2];
	public PMC_REG OwnStatus;
	public PMC_REG EntryNode;
	public PMC_REG Area1PmcAddr;
	public short Area1ExchgAddr;
	public short Area1ExchgSize;
	public PMC_REG Area2PmcAddr;
	public short Area2ExchgAddr;
	public short Area2ExchgSize;
	public PMC_REG Area2PmcDoAddr;
	public short Area2ExchgDoSize;
	public byte[] Reserved1 = new byte[2];
	public PMC_REG Area2PmcDiAddr;
	public PMC_REG Area2ConditionAddr;
	public PMC_REG Area2AlterAddr;
	public short Area2ExchgDiAddr;
	public short Area2ExchgDiSize;
	public PMC_REG ClientMsgAddr;
	public short ClientMsgSize;
	public byte[] Reserved2 = new byte[2];
	public PMC_REG ServerMsgAddr;
	public short ServerMsgSize;
	public byte[] Reserved3 = new byte[2];
	public short Option1;
	public short Option2;
	public IN_FLNTPRM() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("OwnIpAddress", "NodeName", "Area1CmnMemAddr", "Area1CmnMemSize", "Area2CmnMemAddr", "Area2CmnMemSize", "TokenWatch", "MinFrame", "Reserved0", "OwnStatus", "EntryNode", "Area1PmcAddr", "Area1ExchgAddr", "Area1ExchgSize", "Area2PmcAddr", "Area2ExchgAddr", "Area2ExchgSize", "Area2PmcDoAddr", "Area2ExchgDoSize", "Reserved1", "Area2PmcDiAddr", "Area2ConditionAddr", "Area2AlterAddr", "Area2ExchgDiAddr", "Area2ExchgDiSize", "ClientMsgAddr", "ClientMsgSize", "Reserved2", "ServerMsgAddr", "ServerMsgSize", "Reserved3", "Option1", "Option2");
	}
	public IN_FLNTPRM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IN_FLNTPRM implements Structure.ByReference {
		
	};
	public static class ByValue extends IN_FLNTPRM implements Structure.ByValue {
		
	};
}
