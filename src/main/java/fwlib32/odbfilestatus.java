package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbfilestatus extends Structure {
	public NativeLong size;
	public byte min;
	public byte hour;
	public byte day;
	public byte month;
	public short year;
	public byte[] reserve = new byte[2];
	public byte[] filename = new byte[20];
	public odbfilestatus() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("size", "min", "hour", "day", "month", "year", "reserve", "filename");
	}
	public odbfilestatus(NativeLong size, byte min, byte hour, byte day, byte month, short year, byte reserve[], byte filename[]) {
		super();
		this.size = size;
		this.min = min;
		this.hour = hour;
		this.day = day;
		this.month = month;
		this.year = year;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
		if ((filename.length != this.filename.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.filename = filename;
	}
	public odbfilestatus(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbfilestatus implements Structure.ByReference {
		
	};
	public static class ByValue extends odbfilestatus implements Structure.ByValue {
		
	};
}
