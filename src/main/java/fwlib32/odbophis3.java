package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbophis3 extends Structure {
	/** length */
	public short rec_len;
	/** record type */
	public short rec_type;
	public u_union u;
	public static class u_union extends Union {
		public rec_mdi_struct rec_mdi;
		public rec_sgn_struct rec_sgn;
		public rec_alm_struct rec_alm;
		public rec_date_struct rec_date;
		public static class rec_mdi_struct extends Structure {
			/** key code */
			public byte key_code;
			/** power on flag */
			public byte pw_flag;
			/** path index */
			public short pth_no;
			public rec_mdi_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("key_code", "pw_flag", "pth_no");
			}
			public rec_mdi_struct(byte key_code, byte pw_flag, short pth_no) {
				super();
				this.key_code = key_code;
				this.pw_flag = pw_flag;
				this.pth_no = pth_no;
			}
			public rec_mdi_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mdi_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mdi_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_sgn_struct extends Structure {
			/** signal name */
			public short sig_name;
			/** signal number */
			public short sig_no;
			/** old signal bit pattern */
			public byte sig_old;
			/** new signal bit pattern */
			public byte sig_new;
			/** pmc index */
			public short pmc_no;
			public rec_sgn_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("sig_name", "sig_no", "sig_old", "sig_new", "pmc_no");
			}
			public rec_sgn_struct(short sig_name, short sig_no, byte sig_old, byte sig_new, short pmc_no) {
				super();
				this.sig_name = sig_name;
				this.sig_no = sig_no;
				this.sig_old = sig_old;
				this.sig_new = sig_new;
				this.pmc_no = pmc_no;
			}
			public rec_sgn_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_sgn_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_sgn_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_alm_struct extends Structure {
			/** alarm group */
			public short alm_grp;
			/** alarm number */
			public short alm_no;
			/** axis number */
			public short axis_no;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			/** path index */
			public short pth_no;
			public rec_alm_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("alm_grp", "alm_no", "axis_no", "year", "month", "day", "hour", "minute", "second", "pth_no");
			}
			public rec_alm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_alm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_alm_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_date_struct extends Structure {
			/** event type */
			public short evnt_type;
			/** year */
			public short year;
			/** month */
			public short month;
			/** day */
			public short day;
			/** hour */
			public short hour;
			/** minute */
			public short minute;
			/** second */
			public short second;
			public short dummy;
			public rec_date_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("evnt_type", "year", "month", "day", "hour", "minute", "second", "dummy");
			}
			public rec_date_struct(short evnt_type, short year, short month, short day, short hour, short minute, short second, short dummy) {
				super();
				this.evnt_type = evnt_type;
				this.year = year;
				this.month = month;
				this.day = day;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				this.dummy = dummy;
			}
			public rec_date_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_date_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_date_struct implements Structure.ByValue {
				
			};
		};
		public u_union() {
			super();
		}
		public u_union(rec_mdi_struct rec_mdi) {
			super();
			this.rec_mdi = rec_mdi;
			setType(rec_mdi_struct.class);
		}
		public u_union(rec_sgn_struct rec_sgn) {
			super();
			this.rec_sgn = rec_sgn;
			setType(rec_sgn_struct.class);
		}
		public u_union(rec_alm_struct rec_alm) {
			super();
			this.rec_alm = rec_alm;
			setType(rec_alm_struct.class);
		}
		public u_union(rec_date_struct rec_date) {
			super();
			this.rec_date = rec_date;
			setType(rec_date_struct.class);
		}
		public u_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends u_union implements Structure.ByReference {
			
		};
		public static class ByValue extends u_union implements Structure.ByValue {
			
		};
	};
	public odbophis3() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("rec_len", "rec_type", "u");
	}
	public odbophis3(short rec_len, short rec_type, u_union u) {
		super();
		this.rec_len = rec_len;
		this.rec_type = rec_type;
		this.u = u;
	}
	public odbophis3(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbophis3 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbophis3 implements Structure.ByValue {
		
	};
}
