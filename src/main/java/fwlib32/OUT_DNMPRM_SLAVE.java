package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OUT_DNMPRM_SLAVE extends Structure {
	public short NodeNumber;
	public short Communication;
	public short[] reserved1 = new short[6];
	public PMC_REG DetailStatus;
	public short[] reserved2 = new short[2];
	public PMC_REG Di;
	public short DiSize;
	public short reserved3;
	public PMC_REG Do;
	public short DoSize;
	public short reserved4;
	public OUT_DNMPRM_SLAVE() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("NodeNumber", "Communication", "reserved1", "DetailStatus", "reserved2", "Di", "DiSize", "reserved3", "Do", "DoSize", "reserved4");
	}
	public OUT_DNMPRM_SLAVE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends OUT_DNMPRM_SLAVE implements Structure.ByReference {
		
	};
	public static class ByValue extends OUT_DNMPRM_SLAVE implements Structure.ByValue {
		
	};
}
