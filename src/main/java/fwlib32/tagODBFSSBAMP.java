package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagODBFSSBAMP extends Structure {
	/** line number */
	public short ln_num;
	/** slave number */
	public short slave_num;
	/** amp name */
	public byte[] name = new byte[8];
	/** amp series name */
	public byte[] seires = new byte[8];
	/** amp unit type */
	public byte[] unit = new byte[8];
	/** amp currect */
	public byte[] cur = new byte[8];
	/** axis number */
	public short axis_num;
	/**
	 * short	reserve;		/* reserved * /<br>
	 * axis name
	 */
	public byte[] axis_name = new byte[4];
	public tagODBFSSBAMP() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ln_num", "slave_num", "name", "seires", "unit", "cur", "axis_num", "axis_name");
	}
	public tagODBFSSBAMP(short ln_num, short slave_num, byte name[], byte seires[], byte unit[], byte cur[], short axis_num, byte axis_name[]) {
		super();
		this.ln_num = ln_num;
		this.slave_num = slave_num;
		if ((name.length != this.name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.name = name;
		if ((seires.length != this.seires.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.seires = seires;
		if ((unit.length != this.unit.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.unit = unit;
		if ((cur.length != this.cur.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cur = cur;
		this.axis_num = axis_num;
		if ((axis_name.length != this.axis_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.axis_name = axis_name;
	}
	public tagODBFSSBAMP(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagODBFSSBAMP implements Structure.ByReference {
		
	};
	public static class ByValue extends tagODBFSSBAMP implements Structure.ByValue {
		
	};
}
