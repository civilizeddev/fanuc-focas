package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbmgrp extends Structure {
	public NativeLong m_code;
	public short grp_no;
	public byte[] m_name = new byte[21];
	public byte dummy;
	public odbmgrp() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("m_code", "grp_no", "m_name", "dummy");
	}
	public odbmgrp(NativeLong m_code, short grp_no, byte m_name[], byte dummy) {
		super();
		this.m_code = m_code;
		this.grp_no = grp_no;
		if ((m_name.length != this.m_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.m_name = m_name;
		this.dummy = dummy;
	}
	public odbmgrp(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbmgrp implements Structure.ByReference {
		
	};
	public static class ByValue extends odbmgrp implements Structure.ByValue {
		
	};
}
