package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IN_EIP_TYPE_PRM_FLG extends Structure {
	public byte Type;
	public byte[] pad1 = new byte[2];
	public byte Address;
	public byte Size;
	public byte TagName;
	public byte[] pad2 = new byte[2];
	public IN_EIP_TYPE_PRM_FLG() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("Type", "pad1", "Address", "Size", "TagName", "pad2");
	}
	public IN_EIP_TYPE_PRM_FLG(byte Type, byte pad1[], byte Address, byte Size, byte TagName, byte pad2[]) {
		super();
		this.Type = Type;
		if ((pad1.length != this.pad1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad1 = pad1;
		this.Address = Address;
		this.Size = Size;
		this.TagName = TagName;
		if ((pad2.length != this.pad2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad2 = pad2;
	}
	public IN_EIP_TYPE_PRM_FLG(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IN_EIP_TYPE_PRM_FLG implements Structure.ByReference {
		
	};
	public static class ByValue extends IN_EIP_TYPE_PRM_FLG implements Structure.ByValue {
		
	};
}
