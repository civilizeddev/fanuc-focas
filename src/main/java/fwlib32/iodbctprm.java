package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbctprm extends Structure {
	public data_union data;
	public fwlib32.iodbctpr.prm_struct[] prm = new fwlib32.iodbctpr.prm_struct[2];
	public static class data_union extends Union {
		public data_160_struct data_160;
		public data_30i_struct data_30i;
		public static class data_160_struct extends Structure {
			public NativeLong[] acc_bipl = new NativeLong[8];
			public NativeLong acc_chg_time;
			public NativeLong[] jerk_acc_diff = new NativeLong[8];
			public NativeLong[] jerk_acc_diff_lin = new NativeLong[8];
			public byte jerk_acc_ratio;
			public NativeLong[] max_acc = new NativeLong[8];
			public short[] t_con_aipl = new short[8];
			public NativeLong[] corner_feed_diff = new NativeLong[8];
			public NativeLong[] max_cut_fdrate = new NativeLong[8];
			public data_160_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("acc_bipl", "acc_chg_time", "jerk_acc_diff", "jerk_acc_diff_lin", "jerk_acc_ratio", "max_acc", "t_con_aipl", "corner_feed_diff", "max_cut_fdrate");
			}
			public data_160_struct(NativeLong acc_bipl[], NativeLong acc_chg_time, NativeLong jerk_acc_diff[], NativeLong jerk_acc_diff_lin[], byte jerk_acc_ratio, NativeLong max_acc[], short t_con_aipl[], NativeLong corner_feed_diff[], NativeLong max_cut_fdrate[]) {
				super();
				if ((acc_bipl.length != this.acc_bipl.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.acc_bipl = acc_bipl;
				this.acc_chg_time = acc_chg_time;
				if ((jerk_acc_diff.length != this.jerk_acc_diff.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.jerk_acc_diff = jerk_acc_diff;
				if ((jerk_acc_diff_lin.length != this.jerk_acc_diff_lin.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.jerk_acc_diff_lin = jerk_acc_diff_lin;
				this.jerk_acc_ratio = jerk_acc_ratio;
				if ((max_acc.length != this.max_acc.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.max_acc = max_acc;
				if ((t_con_aipl.length != this.t_con_aipl.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.t_con_aipl = t_con_aipl;
				if ((corner_feed_diff.length != this.corner_feed_diff.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.corner_feed_diff = corner_feed_diff;
				if ((max_cut_fdrate.length != this.max_cut_fdrate.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.max_cut_fdrate = max_cut_fdrate;
			}
			public data_160_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends data_160_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends data_160_struct implements Structure.ByValue {
				
			};
		};
		public static class data_30i_struct extends Structure {
			public realprm[] acc_bipl = new realprm[32];
			public realprm acc_chg_time;
			public realprm[] jerk_acc_diff = new realprm[32];
			public realprm[] jerk_acc_diff_lin = new realprm[32];
			public byte jerk_acc_ratio;
			public realprm[] max_acc = new realprm[32];
			public short[] t_con_aipl = new short[32];
			public realprm[] corner_feed_diff = new realprm[32];
			public realprm[] max_cut_fdrate = new realprm[32];
			public data_30i_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("acc_bipl", "acc_chg_time", "jerk_acc_diff", "jerk_acc_diff_lin", "jerk_acc_ratio", "max_acc", "t_con_aipl", "corner_feed_diff", "max_cut_fdrate");
			}
			public data_30i_struct(realprm acc_bipl[], realprm acc_chg_time, realprm jerk_acc_diff[], realprm jerk_acc_diff_lin[], byte jerk_acc_ratio, realprm max_acc[], short t_con_aipl[], realprm corner_feed_diff[], realprm max_cut_fdrate[]) {
				super();
				if ((acc_bipl.length != this.acc_bipl.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.acc_bipl = acc_bipl;
				this.acc_chg_time = acc_chg_time;
				if ((jerk_acc_diff.length != this.jerk_acc_diff.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.jerk_acc_diff = jerk_acc_diff;
				if ((jerk_acc_diff_lin.length != this.jerk_acc_diff_lin.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.jerk_acc_diff_lin = jerk_acc_diff_lin;
				this.jerk_acc_ratio = jerk_acc_ratio;
				if ((max_acc.length != this.max_acc.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.max_acc = max_acc;
				if ((t_con_aipl.length != this.t_con_aipl.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.t_con_aipl = t_con_aipl;
				if ((corner_feed_diff.length != this.corner_feed_diff.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.corner_feed_diff = corner_feed_diff;
				if ((max_cut_fdrate.length != this.max_cut_fdrate.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.max_cut_fdrate = max_cut_fdrate;
			}
			public data_30i_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends data_30i_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends data_30i_struct implements Structure.ByValue {
				
			};
		};
		public data_union() {
			super();
		}
		public data_union(data_160_struct data_160) {
			super();
			this.data_160 = data_160;
			setType(data_160_struct.class);
		}
		public data_union(data_30i_struct data_30i) {
			super();
			this.data_30i = data_30i;
			setType(data_30i_struct.class);
		}
		public data_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public static class prm_struct extends Structure {
		public short datano;
		public short type;
		public u_union u;
		public static class u_union extends Union {
			public byte cdata;
			public short idata;
			public NativeLong ldata;
			public realprm rdata;
			public byte[] cdatas = new byte[32];
			public short[] idatas = new short[32];
			public NativeLong[] ldatas = new NativeLong[32];
			public realprm[] rdatas = new realprm[32];
			public u_union() {
				super();
			}
			public u_union(byte cdata) {
				super();
				this.cdata = cdata;
				setType(Byte.TYPE);
			}
			public u_union(short idata) {
				super();
				this.idata = idata;
				setType(Short.TYPE);
			}
			public u_union(NativeLong ldata) {
				super();
				this.ldata = ldata;
				setType(NativeLong.class);
			}
			public u_union(realprm rdata) {
				super();
				this.rdata = rdata;
				setType(realprm.class);
			}
			public u_union(byte cdatas[]) {
				super();
				if ((cdatas.length != this.cdatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.cdatas = cdatas;
				setType(byte[].class);
			}
			public u_union(short idatas[]) {
				super();
				if ((idatas.length != this.idatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.idatas = idatas;
				setType(short[].class);
			}
			public u_union(NativeLong ldatas[]) {
				super();
				if ((ldatas.length != this.ldatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.ldatas = ldatas;
				setType(NativeLong[].class);
			}
			public u_union(realprm rdatas[]) {
				super();
				if ((rdatas.length != this.rdatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.rdatas = rdatas;
				setType(realprm[].class);
			}
			public u_union(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends u_union implements Structure.ByReference {
				
			};
			public static class ByValue extends u_union implements Structure.ByValue {
				
			};
		};
		public prm_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("datano", "type", "u");
		}
		public prm_struct(short datano, short type, u_union u) {
			super();
			this.datano = datano;
			this.type = type;
			this.u = u;
		}
		public prm_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends prm_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends prm_struct implements Structure.ByValue {
			
		};
	};
	public iodbctprm() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("data", "prm");
	}
	public iodbctprm(data_union data, fwlib32.iodbctpr.prm_struct prm[]) {
		super();
		this.data = data;
		if ((prm.length != this.prm.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.prm = prm;
	}
	public iodbctprm(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbctprm implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbctprm implements Structure.ByValue {
		
	};
}
