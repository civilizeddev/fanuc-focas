package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class prgdir3 extends Structure {
	public NativeLong number;
	public NativeLong length;
	public NativeLong page;
	public byte[] comment = new byte[52];
	public mdate_struct mdate;
	public cdate_struct cdate;
	public static class mdate_struct extends Structure {
		public short year;
		public short month;
		public short day;
		public short hour;
		public short minute;
		public short dummy;
		public mdate_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("year", "month", "day", "hour", "minute", "dummy");
		}
		public mdate_struct(short year, short month, short day, short hour, short minute, short dummy) {
			super();
			this.year = year;
			this.month = month;
			this.day = day;
			this.hour = hour;
			this.minute = minute;
			this.dummy = dummy;
		}
		public mdate_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends mdate_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends mdate_struct implements Structure.ByValue {
			
		};
	};
	public static class cdate_struct extends Structure {
		public short year;
		public short month;
		public short day;
		public short hour;
		public short minute;
		public short dummy;
		public cdate_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("year", "month", "day", "hour", "minute", "dummy");
		}
		public cdate_struct(short year, short month, short day, short hour, short minute, short dummy) {
			super();
			this.year = year;
			this.month = month;
			this.day = day;
			this.hour = hour;
			this.minute = minute;
			this.dummy = dummy;
		}
		public cdate_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends cdate_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends cdate_struct implements Structure.ByValue {
			
		};
	};
	public prgdir3() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("number", "length", "page", "comment", "mdate", "cdate");
	}
	public prgdir3(NativeLong number, NativeLong length, NativeLong page, byte comment[], mdate_struct mdate, cdate_struct cdate) {
		super();
		this.number = number;
		this.length = length;
		this.page = page;
		if ((comment.length != this.comment.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.comment = comment;
		this.mdate = mdate;
		this.cdate = cdate;
	}
	public prgdir3(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends prgdir3 implements Structure.ByReference {
		
	};
	public static class ByValue extends prgdir3 implements Structure.ByValue {
		
	};
}
