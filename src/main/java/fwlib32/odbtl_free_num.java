package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbtl_free_num extends Structure {
	/** edge group number */
	public short edge_gp;
	/** ofset number (H) */
	public short ofs_h;
	/** ofset number (D) */
	public short ofs_d;
	/** ofset number (G) */
	public short ofs_g;
	/** ofset number (W) */
	public short ofs_w;
	/** reserve */
	public short[] reserve = new short[3];
	public odbtl_free_num() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("edge_gp", "ofs_h", "ofs_d", "ofs_g", "ofs_w", "reserve");
	}
	public odbtl_free_num(short edge_gp, short ofs_h, short ofs_d, short ofs_g, short ofs_w, short reserve[]) {
		super();
		this.edge_gp = edge_gp;
		this.ofs_h = ofs_h;
		this.ofs_d = ofs_d;
		this.ofs_g = ofs_g;
		this.ofs_w = ofs_w;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public odbtl_free_num(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbtl_free_num implements Structure.ByReference {
		
	};
	public static class ByValue extends odbtl_free_num implements Structure.ByValue {
		
	};
}
