package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbspdlname extends Structure {
	/** spindle name */
	public byte name;
	/** suffix */
	public byte suff1;
	/** suffix */
	public byte suff2;
	/** suffix */
	public byte suff3;
	public odbspdlname() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "suff1", "suff2", "suff3");
	}
	public odbspdlname(byte name, byte suff1, byte suff2, byte suff3) {
		super();
		this.name = name;
		this.suff1 = suff1;
		this.suff2 = suff2;
		this.suff3 = suff3;
	}
	public odbspdlname(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbspdlname implements Structure.ByReference {
		
	};
	public static class ByValue extends odbspdlname implements Structure.ByValue {
		
	};
}
