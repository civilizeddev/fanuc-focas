package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbnode extends Structure {
	public NativeLong node_no;
	public NativeLong io_base;
	public NativeLong status;
	public NativeLong cnc_type;
	public byte[] node_name = new byte[20];
	public odbnode() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("node_no", "io_base", "status", "cnc_type", "node_name");
	}
	public odbnode(NativeLong node_no, NativeLong io_base, NativeLong status, NativeLong cnc_type, byte node_name[]) {
		super();
		this.node_no = node_no;
		this.io_base = io_base;
		this.status = status;
		this.cnc_type = cnc_type;
		if ((node_name.length != this.node_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.node_name = node_name;
	}
	public odbnode(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbnode implements Structure.ByReference {
		
	};
	public static class ByValue extends odbnode implements Structure.ByValue {
		
	};
}
