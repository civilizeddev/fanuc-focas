package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagIODBIFSBAXIS extends Structure {
	/** Axis Number */
	public short axis_num;
	/** Axis Name */
	public byte[] axis_name = new byte[4];
	public short line;
	/** Amp Name */
	public byte[] amp_name = new byte[8];
	/** M1 - M8 */
	public short[] pm = new short[8];
	/** Cs */
	public short cs;
	/** tandem */
	public short tndm;
	public tagIODBIFSBAXIS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("axis_num", "axis_name", "line", "amp_name", "pm", "cs", "tndm");
	}
	public tagIODBIFSBAXIS(short axis_num, byte axis_name[], short line, byte amp_name[], short pm[], short cs, short tndm) {
		super();
		this.axis_num = axis_num;
		if ((axis_name.length != this.axis_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.axis_name = axis_name;
		this.line = line;
		if ((amp_name.length != this.amp_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.amp_name = amp_name;
		if ((pm.length != this.pm.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pm = pm;
		this.cs = cs;
		this.tndm = tndm;
	}
	public tagIODBIFSBAXIS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagIODBIFSBAXIS implements Structure.ByReference {
		
	};
	public static class ByValue extends tagIODBIFSBAXIS implements Structure.ByValue {
		
	};
}
