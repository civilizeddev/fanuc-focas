package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OUT_DNSPRM extends Structure {
	public short BaudRate;
	public short DiDataOnAbnormal;
	public short OwnMacId;
	public byte[] pad1 = new byte[2];
	public PMC_REG Di;
	public short DiSize;
	public byte[] pad2 = new byte[2];
	public PMC_REG Do;
	public short DoSize;
	public byte[] pad3 = new byte[2];
	public PMC_REG Status;
	public short StatusSize;
	public byte[] pad4 = new byte[2];
	public OUT_DNSPRM() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("BaudRate", "DiDataOnAbnormal", "OwnMacId", "pad1", "Di", "DiSize", "pad2", "Do", "DoSize", "pad3", "Status", "StatusSize", "pad4");
	}
	public OUT_DNSPRM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends OUT_DNSPRM implements Structure.ByReference {
		
	};
	public static class ByValue extends OUT_DNSPRM implements Structure.ByValue {
		
	};
}
