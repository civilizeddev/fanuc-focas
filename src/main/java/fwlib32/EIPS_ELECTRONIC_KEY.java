package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EIPS_ELECTRONIC_KEY extends Structure {
	public short VendorID;
	public short DeviceType;
	public short ProductCode;
	public byte MajorRevision;
	public byte MinorRevision;
	public byte Compatibility;
	public byte[] pad = new byte[3];
	public EIPS_ELECTRONIC_KEY() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("VendorID", "DeviceType", "ProductCode", "MajorRevision", "MinorRevision", "Compatibility", "pad");
	}
	public EIPS_ELECTRONIC_KEY(short VendorID, short DeviceType, short ProductCode, byte MajorRevision, byte MinorRevision, byte Compatibility, byte pad[]) {
		super();
		this.VendorID = VendorID;
		this.DeviceType = DeviceType;
		this.ProductCode = ProductCode;
		this.MajorRevision = MajorRevision;
		this.MinorRevision = MinorRevision;
		this.Compatibility = Compatibility;
		if ((pad.length != this.pad.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad = pad;
	}
	public EIPS_ELECTRONIC_KEY(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EIPS_ELECTRONIC_KEY implements Structure.ByReference {
		
	};
	public static class ByValue extends EIPS_ELECTRONIC_KEY implements Structure.ByValue {
		
	};
}
