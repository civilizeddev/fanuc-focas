package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtool_causenme extends Structure {
	public byte[] cause1 = new byte[8];
	public byte[] cause2 = new byte[8];
	public byte[] cause3 = new byte[8];
	public byte[] cause4 = new byte[8];
	public byte[] cause5 = new byte[8];
	public iodbtool_causenme() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("cause1", "cause2", "cause3", "cause4", "cause5");
	}
	public iodbtool_causenme(byte cause1[], byte cause2[], byte cause3[], byte cause4[], byte cause5[]) {
		super();
		if ((cause1.length != this.cause1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cause1 = cause1;
		if ((cause2.length != this.cause2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cause2 = cause2;
		if ((cause3.length != this.cause3.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cause3 = cause3;
		if ((cause4.length != this.cause4.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cause4 = cause4;
		if ((cause5.length != this.cause5.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cause5 = cause5;
	}
	public iodbtool_causenme(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtool_causenme implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtool_causenme implements Structure.ByValue {
		
	};
}
