package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbmtap extends Structure {
	public short slct;
	public NativeLong tool_no;
	public NativeLong x_axis_ofs;
	public NativeLong y_axis_ofs;
	public NativeLong punch_count;
	public NativeLong tool_life;
	public NativeLong[] reserve = new NativeLong[11];
	public iodbmtap() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("slct", "tool_no", "x_axis_ofs", "y_axis_ofs", "punch_count", "tool_life", "reserve");
	}
	public iodbmtap(short slct, NativeLong tool_no, NativeLong x_axis_ofs, NativeLong y_axis_ofs, NativeLong punch_count, NativeLong tool_life, NativeLong reserve[]) {
		super();
		this.slct = slct;
		this.tool_no = tool_no;
		this.x_axis_ofs = x_axis_ofs;
		this.y_axis_ofs = y_axis_ofs;
		this.punch_count = punch_count;
		this.tool_life = tool_life;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodbmtap(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbmtap implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbmtap implements Structure.ByValue {
		
	};
}
