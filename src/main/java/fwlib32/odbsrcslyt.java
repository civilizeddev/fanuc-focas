package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbsrcslyt extends Structure {
	public short[] spndl = new short[4];
	public short[] servo = new short[8];
	public byte[] axis_name = new byte[8];
	public odbsrcslyt() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("spndl", "servo", "axis_name");
	}
	public odbsrcslyt(short spndl[], short servo[], byte axis_name[]) {
		super();
		if ((spndl.length != this.spndl.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.spndl = spndl;
		if ((servo.length != this.servo.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.servo = servo;
		if ((axis_name.length != this.axis_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.axis_name = axis_name;
	}
	public odbsrcslyt(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbsrcslyt implements Structure.ByReference {
		
	};
	public static class ByValue extends odbsrcslyt implements Structure.ByValue {
		
	};
}
