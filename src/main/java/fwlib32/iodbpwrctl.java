package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbpwrctl extends Structure {
	public short slct;
	public short power_min;
	public short pwr_sp_zr;
	public short freq_min;
	public short freq_sp_zr;
	public short duty_min;
	public short duty_sp_zr;
	public byte feed_r_dec;
	public byte reserve;
	public NativeLong feed_r;
	public short ag_press_min;
	public short ag_press_sp_zr;
	public short[] reserves = new short[4];
	public iodbpwrctl() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("slct", "power_min", "pwr_sp_zr", "freq_min", "freq_sp_zr", "duty_min", "duty_sp_zr", "feed_r_dec", "reserve", "feed_r", "ag_press_min", "ag_press_sp_zr", "reserves");
	}
	public iodbpwrctl(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbpwrctl implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbpwrctl implements Structure.ByValue {
		
	};
}
