package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbrbsignal extends Structure {
	public byte type;
	public byte state;
	public short no;
	public byte[] name = new byte[76];
	public odbrbsignal() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("type", "state", "no", "name");
	}
	public odbrbsignal(byte type, byte state, short no, byte name[]) {
		super();
		this.type = type;
		this.state = state;
		this.no = no;
		if ((name.length != this.name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.name = name;
	}
	public odbrbsignal(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbrbsignal implements Structure.ByReference {
		
	};
	public static class ByValue extends odbrbsignal implements Structure.ByValue {
		
	};
}
