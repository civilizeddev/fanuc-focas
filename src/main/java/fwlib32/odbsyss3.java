package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbsyss3 extends Structure {
	public short soft_id;
	public byte[] soft_series = new byte[5];
	public byte[] soft_edition = new byte[5];
	public odbsyss3() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("soft_id", "soft_series", "soft_edition");
	}
	public odbsyss3(short soft_id, byte soft_series[], byte soft_edition[]) {
		super();
		this.soft_id = soft_id;
		if ((soft_series.length != this.soft_series.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.soft_series = soft_series;
		if ((soft_edition.length != this.soft_edition.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.soft_edition = soft_edition;
	}
	public odbsyss3(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbsyss3 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbsyss3 implements Structure.ByValue {
		
	};
}
