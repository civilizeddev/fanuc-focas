package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtgi3 extends Structure {
	/** start group number */
	public short s_grp;
	/** dummy */
	public short dummy;
	/** end group number */
	public short e_grp;
	/** tool life rest count */
	public NativeLong[] life_rest = new NativeLong[5];
	public iodbtgi3() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("s_grp", "dummy", "e_grp", "life_rest");
	}
	public iodbtgi3(short s_grp, short dummy, short e_grp, NativeLong life_rest[]) {
		super();
		this.s_grp = s_grp;
		this.dummy = dummy;
		this.e_grp = e_grp;
		if ((life_rest.length != this.life_rest.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.life_rest = life_rest;
	}
	public iodbtgi3(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtgi3 implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtgi3 implements Structure.ByValue {
		
	};
}
