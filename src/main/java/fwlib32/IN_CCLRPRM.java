package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IN_CCLRPRM extends Structure {
	public short BaudRate;
	public short ID;
	public short UseIDCount;
	public short DataOnAbnormal;
	public PMC_REG Status;
	public PMC_REG RY;
	public short RYSize;
	public byte[] pad1 = new byte[2];
	public PMC_REG RX;
	public short RXSize;
	public byte[] pad2 = new byte[2];
	public PMC_REG RWw;
	public short RWwSize;
	public byte[] pad3 = new byte[2];
	public PMC_REG RWr;
	public short RWrSize;
	public byte[] pad4 = new byte[2];
	public IN_CCLRPRM() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("BaudRate", "ID", "UseIDCount", "DataOnAbnormal", "Status", "RY", "RYSize", "pad1", "RX", "RXSize", "pad2", "RWw", "RWwSize", "pad3", "RWr", "RWrSize", "pad4");
	}
	public IN_CCLRPRM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IN_CCLRPRM implements Structure.ByReference {
		
	};
	public static class ByValue extends IN_CCLRPRM implements Structure.ByValue {
		
	};
}
