package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtimer extends Structure {
	public short type;
	public short dummy;
	public data_union data;
	public static class data_union extends Union {
		public date_struct date;
		public time_struct time;
		public static class date_struct extends Structure {
			public short year;
			public short month;
			public short date;
			public date_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("year", "month", "date");
			}
			public date_struct(short year, short month, short date) {
				super();
				this.year = year;
				this.month = month;
				this.date = date;
			}
			public date_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends date_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends date_struct implements Structure.ByValue {
				
			};
		};
		public static class time_struct extends Structure {
			public short hour;
			public short minute;
			public short second;
			public time_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("hour", "minute", "second");
			}
			public time_struct(short hour, short minute, short second) {
				super();
				this.hour = hour;
				this.minute = minute;
				this.second = second;
			}
			public time_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends time_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends time_struct implements Structure.ByValue {
				
			};
		};
		public data_union() {
			super();
		}
		public data_union(date_struct date) {
			super();
			this.date = date;
			setType(date_struct.class);
		}
		public data_union(time_struct time) {
			super();
			this.time = time;
			setType(time_struct.class);
		}
		public data_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public iodbtimer() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("type", "dummy", "data");
	}
	public iodbtimer(short type, short dummy, data_union data) {
		super();
		this.type = type;
		this.dummy = dummy;
		this.data = data;
	}
	public iodbtimer(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtimer implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtimer implements Structure.ByValue {
		
	};
}
