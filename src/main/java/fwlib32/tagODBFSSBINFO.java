package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagODBFSSBINFO extends Structure {
	/** axis card amount */
	public short card_num;
	public tagODBFSSBINFO.card_struct[] card = new tagODBFSSBINFO.card_struct[8];
	public static class card_struct extends Structure {
		/** amp amount */
		public short amp_num;
		/** pulse module amount */
		public short plsm_num;
		public card_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("amp_num", "plsm_num");
		}
		public card_struct(short amp_num, short plsm_num) {
			super();
			this.amp_num = amp_num;
			this.plsm_num = plsm_num;
		}
		public card_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends card_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends card_struct implements Structure.ByValue {
			
		};
	};
	public tagODBFSSBINFO() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("card_num", "card");
	}
	public tagODBFSSBINFO(short card_num, tagODBFSSBINFO.card_struct card[]) {
		super();
		this.card_num = card_num;
		if ((card.length != this.card.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.card = card;
	}
	public tagODBFSSBINFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagODBFSSBINFO implements Structure.ByReference {
		
	};
	public static class ByValue extends tagODBFSSBINFO implements Structure.ByValue {
		
	};
}
