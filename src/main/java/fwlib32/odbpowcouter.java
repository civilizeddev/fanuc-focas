package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbpowcouter extends Structure {
	public NativeLong[] ave_pow = new NativeLong[8];
	public short ref_ofs;
	public byte ref_adrs;
	public byte ref_path;
	public odbpowcouter() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ave_pow", "ref_ofs", "ref_adrs", "ref_path");
	}
	public odbpowcouter(NativeLong ave_pow[], short ref_ofs, byte ref_adrs, byte ref_path) {
		super();
		if ((ave_pow.length != this.ave_pow.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ave_pow = ave_pow;
		this.ref_ofs = ref_ofs;
		this.ref_adrs = ref_adrs;
		this.ref_path = ref_path;
	}
	public odbpowcouter(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbpowcouter implements Structure.ByReference {
		
	};
	public static class ByValue extends odbpowcouter implements Structure.ByValue {
		
	};
}
