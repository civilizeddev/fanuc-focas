package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbmhis2 extends Structure {
	/** start number */
	public short s_no;
	/** end number */
	public short e_no;
	public odbmhis2.opm_his_struct[] opm_his = new odbmhis2.opm_his_struct[10];
	public static class opm_his_struct extends Structure {
		/** Dysplay flag(ON/OFF) */
		public short dsp_flg;
		/** operater message number */
		public short om_no;
		/** year */
		public short year;
		/** month */
		public short month;
		/** day */
		public short day;
		/** Hour */
		public short hour;
		/** Minute */
		public short minute;
		/** Second */
		public short second;
		/** Messege */
		public byte[] ope_msg = new byte[256];
		public opm_his_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("dsp_flg", "om_no", "year", "month", "day", "hour", "minute", "second", "ope_msg");
		}
		public opm_his_struct(short dsp_flg, short om_no, short year, short month, short day, short hour, short minute, short second, byte ope_msg[]) {
			super();
			this.dsp_flg = dsp_flg;
			this.om_no = om_no;
			this.year = year;
			this.month = month;
			this.day = day;
			this.hour = hour;
			this.minute = minute;
			this.second = second;
			if ((ope_msg.length != this.ope_msg.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.ope_msg = ope_msg;
		}
		public opm_his_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends opm_his_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends opm_his_struct implements Structure.ByValue {
			
		};
	};
	public odbmhis2() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("s_no", "e_no", "opm_his");
	}
	public odbmhis2(short s_no, short e_no, odbmhis2.opm_his_struct opm_his[]) {
		super();
		this.s_no = s_no;
		this.e_no = e_no;
		if ((opm_his.length != this.opm_his.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.opm_his = opm_his;
	}
	public odbmhis2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbmhis2 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbmhis2 implements Structure.ByValue {
		
	};
}
