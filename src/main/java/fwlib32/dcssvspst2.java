package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class dcssvspst2 extends Structure {
	public double limit_dt_p;
	public double limit_dt_m;
	public short axissts;
	public short unittype;
	public byte axissts2;
	public byte level;
	public byte alm_lvl;
	public byte add_info;
	public dcssvspst2() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("limit_dt_p", "limit_dt_m", "axissts", "unittype", "axissts2", "level", "alm_lvl", "add_info");
	}
	public dcssvspst2(double limit_dt_p, double limit_dt_m, short axissts, short unittype, byte axissts2, byte level, byte alm_lvl, byte add_info) {
		super();
		this.limit_dt_p = limit_dt_p;
		this.limit_dt_m = limit_dt_m;
		this.axissts = axissts;
		this.unittype = unittype;
		this.axissts2 = axissts2;
		this.level = level;
		this.alm_lvl = alm_lvl;
		this.add_info = add_info;
	}
	public dcssvspst2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends dcssvspst2 implements Structure.ByReference {
		
	};
	public static class ByValue extends dcssvspst2 implements Structure.ByValue {
		
	};
}
