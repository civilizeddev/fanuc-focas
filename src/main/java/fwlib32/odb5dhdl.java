package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odb5dhdl extends Structure {
	public byte[] name = new byte[4];
	public NativeLong data;
	public short dec;
	public short flag;
	public short axis;
	public odb5dhdl() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("name", "data", "dec", "flag", "axis");
	}
	public odb5dhdl(byte name[], NativeLong data, short dec, short flag, short axis) {
		super();
		if ((name.length != this.name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.name = name;
		this.data = data;
		this.dec = dec;
		this.flag = flag;
		this.axis = axis;
	}
	public odb5dhdl(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odb5dhdl implements Structure.ByReference {
		
	};
	public static class ByValue extends odb5dhdl implements Structure.ByValue {
		
	};
}
