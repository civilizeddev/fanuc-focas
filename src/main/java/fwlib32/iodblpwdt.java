package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodblpwdt extends Structure {
	public short slct;
	public short dty_const;
	public short dty_min;
	public short[] reserve = new short[6];
	public iodblpwdt() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("slct", "dty_const", "dty_min", "reserve");
	}
	public iodblpwdt(short slct, short dty_const, short dty_min, short reserve[]) {
		super();
		this.slct = slct;
		this.dty_const = dty_const;
		this.dty_min = dty_min;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodblpwdt(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodblpwdt implements Structure.ByReference {
		
	};
	public static class ByValue extends iodblpwdt implements Structure.ByValue {
		
	};
}
