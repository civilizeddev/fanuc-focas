package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbnc extends Structure {
	public u_union u;
	public static class u_union extends Union {
		public bin_struct bin;
		/** ASCII string type */
		public byte[] asc = new byte[31];
		public static class bin_struct extends Structure {
			/** registered program number */
			public short reg_prg;
			/** unregistered program number */
			public short unreg_prg;
			/** used memory area */
			public NativeLong used_mem;
			/** unused memory area */
			public NativeLong unused_mem;
			public bin_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("reg_prg", "unreg_prg", "used_mem", "unused_mem");
			}
			public bin_struct(short reg_prg, short unreg_prg, NativeLong used_mem, NativeLong unused_mem) {
				super();
				this.reg_prg = reg_prg;
				this.unreg_prg = unreg_prg;
				this.used_mem = used_mem;
				this.unused_mem = unused_mem;
			}
			public bin_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends bin_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends bin_struct implements Structure.ByValue {
				
			};
		};
		public u_union() {
			super();
		}
		public u_union(bin_struct bin) {
			super();
			this.bin = bin;
			setType(bin_struct.class);
		}
		public u_union(byte asc[]) {
			super();
			if ((asc.length != this.asc.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.asc = asc;
			setType(byte[].class);
		}
		public u_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends u_union implements Structure.ByReference {
			
		};
		public static class ByValue extends u_union implements Structure.ByValue {
			
		};
	};
	public odbnc() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("u");
	}
	public odbnc(u_union u) {
		super();
		this.u = u;
	}
	public odbnc(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbnc implements Structure.ByReference {
		
	};
	public static class ByValue extends odbnc implements Structure.ByValue {
		
	};
}
