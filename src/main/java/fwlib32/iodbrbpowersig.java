package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbrbpowersig extends Structure {
	public byte unit_type;
	public byte adr_type;
	public short address;
	public byte bit;
	public byte[] reserve = new byte[3];
	public iodbrbpowersig() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("unit_type", "adr_type", "address", "bit", "reserve");
	}
	public iodbrbpowersig(byte unit_type, byte adr_type, short address, byte bit, byte reserve[]) {
		super();
		this.unit_type = unit_type;
		this.adr_type = adr_type;
		this.address = address;
		this.bit = bit;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodbrbpowersig(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbrbpowersig implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbrbpowersig implements Structure.ByValue {
		
	};
}
