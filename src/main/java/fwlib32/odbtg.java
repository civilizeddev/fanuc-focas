package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbtg extends Structure {
	/** start group number */
	public short grp_num;
	/** dummy */
	public short[] dummy = new short[2];
	/** tool number */
	public NativeLong ntool;
	/** tool life */
	public NativeLong life;
	/** tool life counter */
	public NativeLong count;
	public fwlib32.iodbprm.data_struct[] data = new fwlib32.iodbprm.data_struct[5];
	public static class data_struct extends Structure {
		/** tool number */
		public NativeLong tuse_num;
		/** tool life */
		public NativeLong tool_num;
		/** tool life counter */
		public NativeLong length_num;
		/** tool life counter */
		public NativeLong radius_num;
		/** tool life counter */
		public NativeLong tinfo;
		public data_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("tuse_num", "tool_num", "length_num", "radius_num", "tinfo");
		}
		public data_struct(NativeLong tuse_num, NativeLong tool_num, NativeLong length_num, NativeLong radius_num, NativeLong tinfo) {
			super();
			this.tuse_num = tuse_num;
			this.tool_num = tool_num;
			this.length_num = length_num;
			this.radius_num = radius_num;
			this.tinfo = tinfo;
		}
		public data_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends data_struct implements Structure.ByValue {
			
		};
	};
	public odbtg() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("grp_num", "dummy", "ntool", "life", "count", "data");
	}
	public odbtg(short grp_num, short dummy[], NativeLong ntool, NativeLong life, NativeLong count, fwlib32.iodbprm.data_struct data[]) {
		super();
		this.grp_num = grp_num;
		if ((dummy.length != this.dummy.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dummy = dummy;
		this.ntool = ntool;
		this.life = life;
		this.count = count;
		if ((data.length != this.data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.data = data;
	}
	public odbtg(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbtg implements Structure.ByReference {
		
	};
	public static class ByValue extends odbtg implements Structure.ByValue {
		
	};
}
