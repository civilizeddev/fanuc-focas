package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbusbsize extends Structure {
	/** total size (high) */
	public NativeLong totalsize_h;
	/** total size (low) */
	public NativeLong totalsize_l;
	/** free size (high) */
	public NativeLong freesize_h;
	/** free size (low) */
	public NativeLong freesize_l;
	public odbusbsize() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("totalsize_h", "totalsize_l", "freesize_h", "freesize_l");
	}
	public odbusbsize(NativeLong totalsize_h, NativeLong totalsize_l, NativeLong freesize_h, NativeLong freesize_l) {
		super();
		this.totalsize_h = totalsize_h;
		this.totalsize_l = totalsize_l;
		this.freesize_h = freesize_h;
		this.freesize_l = freesize_l;
	}
	public odbusbsize(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbusbsize implements Structure.ByReference {
		
	};
	public static class ByValue extends odbusbsize implements Structure.ByValue {
		
	};
}
