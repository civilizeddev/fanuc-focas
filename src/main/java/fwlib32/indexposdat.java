package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class indexposdat extends Structure {
	public NativeLong min_value;
	public NativeLong max_value;
	public byte setting;
	public byte[] dummy = new byte[3];
	public indexposdat() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("min_value", "max_value", "setting", "dummy");
	}
	public indexposdat(NativeLong min_value, NativeLong max_value, byte setting, byte dummy[]) {
		super();
		this.min_value = min_value;
		this.max_value = max_value;
		this.setting = setting;
		if ((dummy.length != this.dummy.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dummy = dummy;
	}
	public indexposdat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends indexposdat implements Structure.ByReference {
		
	};
	public static class ByValue extends indexposdat implements Structure.ByValue {
		
	};
}
