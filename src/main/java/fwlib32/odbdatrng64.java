package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbdatrng64 extends Structure {
	/** lower limit */
	public double data_min;
	/** upper limit */
	public double data_max;
	/** decimal point */
	public NativeLong dec;
	/** status of setting */
	public NativeLong status;
	public odbdatrng64() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("data_min", "data_max", "dec", "status");
	}
	public odbdatrng64(double data_min, double data_max, NativeLong dec, NativeLong status) {
		super();
		this.data_min = data_min;
		this.data_max = data_max;
		this.dec = dec;
		this.status = status;
	}
	public odbdatrng64(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbdatrng64 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbdatrng64 implements Structure.ByValue {
		
	};
}
