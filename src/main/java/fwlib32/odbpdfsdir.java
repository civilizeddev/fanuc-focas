package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbpdfsdir extends Structure {
	/** existence of sub directory */
	public short sub_exist;
	public short dummy;
	/** directory name */
	public byte[] d_f = new byte[36];
	public odbpdfsdir() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("sub_exist", "dummy", "d_f");
	}
	public odbpdfsdir(short sub_exist, short dummy, byte d_f[]) {
		super();
		this.sub_exist = sub_exist;
		this.dummy = dummy;
		if ((d_f.length != this.d_f.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.d_f = d_f;
	}
	public odbpdfsdir(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbpdfsdir implements Structure.ByReference {
		
	};
	public static class ByValue extends odbpdfsdir implements Structure.ByValue {
		
	};
}
