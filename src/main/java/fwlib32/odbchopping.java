package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbchopping extends Structure {
	public realnum cur_pos;
	public realnum cur_speed;
	public realnum real_udp;
	public realnum real_ldp;
	public NativeLong stroke_cnt;
	public odbchopping() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("cur_pos", "cur_speed", "real_udp", "real_ldp", "stroke_cnt");
	}
	public odbchopping(realnum cur_pos, realnum cur_speed, realnum real_udp, realnum real_ldp, NativeLong stroke_cnt) {
		super();
		this.cur_pos = cur_pos;
		this.cur_speed = cur_speed;
		this.real_udp = real_udp;
		this.real_ldp = real_ldp;
		this.stroke_cnt = stroke_cnt;
	}
	public odbchopping(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbchopping implements Structure.ByReference {
		
	};
	public static class ByValue extends odbchopping implements Structure.ByValue {
		
	};
}
