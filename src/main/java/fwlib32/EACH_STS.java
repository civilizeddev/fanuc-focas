package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EACH_STS extends Structure {
	public byte StatusFlag;
	public byte ErrDetectNode;
	public byte ErrSendNode;
	public byte[] Reserved = new byte[1];
	public EACH_STS() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("StatusFlag", "ErrDetectNode", "ErrSendNode", "Reserved");
	}
	public EACH_STS(byte StatusFlag, byte ErrDetectNode, byte ErrSendNode, byte Reserved[]) {
		super();
		this.StatusFlag = StatusFlag;
		this.ErrDetectNode = ErrDetectNode;
		this.ErrSendNode = ErrSendNode;
		if ((Reserved.length != this.Reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Reserved = Reserved;
	}
	public EACH_STS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EACH_STS implements Structure.ByReference {
		
	};
	public static class ByValue extends EACH_STS implements Structure.ByValue {
		
	};
}
