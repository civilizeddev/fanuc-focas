package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbpmc extends Structure {
	/** PMC address type */
	public short type_a;
	/** PMC data type */
	public short type_d;
	/** start PMC address */
	public short datano_s;
	/** end PMC address */
	public short datano_e;
	public u_union u;
	public static class u_union extends Union {
		/** PMC data */
		public byte[] cdata = new byte[5];
		public short[] idata = new short[5];
		public NativeLong[] ldata = new NativeLong[5];
		public u_union() {
			super();
		}
		public u_union(byte cdata[]) {
			super();
			if ((cdata.length != this.cdata.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.cdata = cdata;
			setType(byte[].class);
		}
		public u_union(short idata[]) {
			super();
			if ((idata.length != this.idata.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.idata = idata;
			setType(short[].class);
		}
		public u_union(NativeLong ldata[]) {
			super();
			if ((ldata.length != this.ldata.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.ldata = ldata;
			setType(NativeLong[].class);
		}
		public u_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends u_union implements Structure.ByReference {
			
		};
		public static class ByValue extends u_union implements Structure.ByValue {
			
		};
	};
	public iodbpmc() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("type_a", "type_d", "datano_s", "datano_e", "u");
	}
	public iodbpmc(short type_a, short type_d, short datano_s, short datano_e, u_union u) {
		super();
		this.type_a = type_a;
		this.type_d = type_d;
		this.datano_s = datano_s;
		this.datano_e = datano_e;
		this.u = u;
	}
	public iodbpmc(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbpmc implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbpmc implements Structure.ByValue {
		
	};
}
