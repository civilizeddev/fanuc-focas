package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odblactn extends Structure {
	public short slct;
	public short act_proc;
	public short act_pirce;
	public short act_slop;
	public short[] reserve = new short[5];
	public odblactn() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("slct", "act_proc", "act_pirce", "act_slop", "reserve");
	}
	public odblactn(short slct, short act_proc, short act_pirce, short act_slop, short reserve[]) {
		super();
		this.slct = slct;
		this.act_proc = act_proc;
		this.act_pirce = act_pirce;
		this.act_slop = act_slop;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public odblactn(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odblactn implements Structure.ByReference {
		
	};
	public static class ByValue extends odblactn implements Structure.ByValue {
		
	};
}
