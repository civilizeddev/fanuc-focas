package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbrmtprm extends Structure {
	public short condition;
	public short reserve;
	public trg_union trg;
	public NativeLong delay;
	public short wv_intrvl;
	public short io_intrvl;
	public short kind1;
	public short kind2;
	public iodbrmtprm.smpl_struct[] smpl = new iodbrmtprm.smpl_struct[32];
	public static class trg_union extends Union {
		public alm_struct alm;
		public io_struct io;
		public static class alm_struct extends Structure {
			public short no;
			public byte axis;
			public byte type;
			public alm_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("no", "axis", "type");
			}
			public alm_struct(short no, byte axis, byte type) {
				super();
				this.no = no;
				this.axis = axis;
				this.type = type;
			}
			public alm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends alm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends alm_struct implements Structure.ByValue {
				
			};
		};
		public static class io_struct extends Structure {
			public byte adr;
			public byte bit;
			public short no;
			public io_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("adr", "bit", "no");
			}
			public io_struct(byte adr, byte bit, short no) {
				super();
				this.adr = adr;
				this.bit = bit;
				this.no = no;
			}
			public io_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends io_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends io_struct implements Structure.ByValue {
				
			};
		};
		public trg_union() {
			super();
		}
		public trg_union(alm_struct alm) {
			super();
			this.alm = alm;
			setType(alm_struct.class);
		}
		public trg_union(io_struct io) {
			super();
			this.io = io;
			setType(io_struct.class);
		}
		public trg_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends trg_union implements Structure.ByReference {
			
		};
		public static class ByValue extends trg_union implements Structure.ByValue {
			
		};
	};
	public static class smpl_struct extends Structure {
		public byte adr;
		public byte bit;
		public short no;
		public smpl_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("adr", "bit", "no");
		}
		public smpl_struct(byte adr, byte bit, short no) {
			super();
			this.adr = adr;
			this.bit = bit;
			this.no = no;
		}
		public smpl_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends smpl_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends smpl_struct implements Structure.ByValue {
			
		};
	};
	public iodbrmtprm() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("condition", "reserve", "trg", "delay", "wv_intrvl", "io_intrvl", "kind1", "kind2", "smpl");
	}
	public iodbrmtprm(short condition, short reserve, trg_union trg, NativeLong delay, short wv_intrvl, short io_intrvl, short kind1, short kind2, iodbrmtprm.smpl_struct smpl[]) {
		super();
		this.condition = condition;
		this.reserve = reserve;
		this.trg = trg;
		this.delay = delay;
		this.wv_intrvl = wv_intrvl;
		this.io_intrvl = io_intrvl;
		this.kind1 = kind1;
		this.kind2 = kind2;
		if ((smpl.length != this.smpl.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.smpl = smpl;
	}
	public iodbrmtprm(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbrmtprm implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbrmtprm implements Structure.ByValue {
		
	};
}
