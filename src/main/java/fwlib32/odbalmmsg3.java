package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbalmmsg3 extends Structure {
	public NativeLong alm_no;
	public short type;
	public short axis;
	public short dummy;
	public short msg_len;
	public byte[] alm_msg = new byte[256];
	public odbalmmsg3() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("alm_no", "type", "axis", "dummy", "msg_len", "alm_msg");
	}
	public odbalmmsg3(NativeLong alm_no, short type, short axis, short dummy, short msg_len, byte alm_msg[]) {
		super();
		this.alm_no = alm_no;
		this.type = type;
		this.axis = axis;
		this.dummy = dummy;
		this.msg_len = msg_len;
		if ((alm_msg.length != this.alm_msg.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.alm_msg = alm_msg;
	}
	public odbalmmsg3(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbalmmsg3 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbalmmsg3 implements Structure.ByValue {
		
	};
}
