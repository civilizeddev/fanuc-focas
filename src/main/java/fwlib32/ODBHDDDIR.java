package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ODBHDDDIR extends Structure {
	public byte[] file_name = new byte[64];
	public byte[] comment = new byte[80];
	public short attribute;
	public short reserved;
	public NativeLong size;
	public byte[] date = new byte[16];
	public ODBHDDDIR() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("file_name", "comment", "attribute", "reserved", "size", "date");
	}
	public ODBHDDDIR(byte file_name[], byte comment[], short attribute, short reserved, NativeLong size, byte date[]) {
		super();
		if ((file_name.length != this.file_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.file_name = file_name;
		if ((comment.length != this.comment.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.comment = comment;
		this.attribute = attribute;
		this.reserved = reserved;
		this.size = size;
		if ((date.length != this.date.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.date = date;
	}
	public ODBHDDDIR(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ODBHDDDIR implements Structure.ByReference {
		
	};
	public static class ByValue extends ODBHDDDIR implements Structure.ByValue {
		
	};
}
