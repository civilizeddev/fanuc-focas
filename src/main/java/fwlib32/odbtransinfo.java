package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbtransinfo extends Structure {
	public NativeLong mas_buff_size;
	public short trans_start_reqflag;
	public short trans_end_reqflag;
	public short trans_start_respflag;
	public short trans_end_respflag;
	public NativeLong all_transfer_size;
	public short data_id;
	public short reserve;
	public NativeLong data_write_pt;
	public NativeLong data_read_pt;
	public NativeLong accumulation_counter;
	public short forwarding_status;
	public odbtransinfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("mas_buff_size", "trans_start_reqflag", "trans_end_reqflag", "trans_start_respflag", "trans_end_respflag", "all_transfer_size", "data_id", "reserve", "data_write_pt", "data_read_pt", "accumulation_counter", "forwarding_status");
	}
	public odbtransinfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbtransinfo implements Structure.ByReference {
		
	};
	public static class ByValue extends odbtransinfo implements Structure.ByValue {
		
	};
}
