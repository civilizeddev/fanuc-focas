package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbslop extends Structure {
	public NativeLong slct;
	public NativeLong upleng;
	public short[] upsp = new short[10];
	public NativeLong dwleng;
	public short[] dwsp = new short[10];
	public byte upleng_dec;
	public byte dwleng_dec;
	public short[] reserve = new short[9];
	public iodbslop() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("slct", "upleng", "upsp", "dwleng", "dwsp", "upleng_dec", "dwleng_dec", "reserve");
	}
	public iodbslop(NativeLong slct, NativeLong upleng, short upsp[], NativeLong dwleng, short dwsp[], byte upleng_dec, byte dwleng_dec, short reserve[]) {
		super();
		this.slct = slct;
		this.upleng = upleng;
		if ((upsp.length != this.upsp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.upsp = upsp;
		this.dwleng = dwleng;
		if ((dwsp.length != this.dwsp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dwsp = dwsp;
		this.upleng_dec = upleng_dec;
		this.dwleng_dec = dwleng_dec;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodbslop(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbslop implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbslop implements Structure.ByValue {
		
	};
}
