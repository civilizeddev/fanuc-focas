package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class hol64 extends Structure {
	/** #1 */
	public double[] mes_val1 = new double[2];
	public NativeLong[] mes_dp1 = new NativeLong[2];
	/** #2 */
	public double[] mes_val2 = new double[2];
	public NativeLong[] mes_dp2 = new NativeLong[2];
	/** #3 */
	public double[] mes_val3 = new double[2];
	public NativeLong[] mes_dp3 = new NativeLong[2];
	/** axis */
	public byte[] mes_axis = new byte[2];
	public byte[] mes_parl = new byte[2];
	public hol64() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("mes_val1", "mes_dp1", "mes_val2", "mes_dp2", "mes_val3", "mes_dp3", "mes_axis", "mes_parl");
	}
	public hol64(double mes_val1[], NativeLong mes_dp1[], double mes_val2[], NativeLong mes_dp2[], double mes_val3[], NativeLong mes_dp3[], byte mes_axis[], byte mes_parl[]) {
		super();
		if ((mes_val1.length != this.mes_val1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_val1 = mes_val1;
		if ((mes_dp1.length != this.mes_dp1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_dp1 = mes_dp1;
		if ((mes_val2.length != this.mes_val2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_val2 = mes_val2;
		if ((mes_dp2.length != this.mes_dp2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_dp2 = mes_dp2;
		if ((mes_val3.length != this.mes_val3.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_val3 = mes_val3;
		if ((mes_dp3.length != this.mes_dp3.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_dp3 = mes_dp3;
		if ((mes_axis.length != this.mes_axis.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_axis = mes_axis;
		if ((mes_parl.length != this.mes_parl.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.mes_parl = mes_parl;
	}
	public hol64(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends hol64 implements Structure.ByReference {
		
	};
	public static class ByValue extends hol64 implements Structure.ByValue {
		
	};
}
