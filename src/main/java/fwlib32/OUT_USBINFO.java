package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OUT_USBINFO extends Structure {
	public short UsbStatus;
	public short VendorID;
	public short ProductID;
	public short DeviceRelease;
	public byte[] Manufacturer = new byte[64];
	public byte[] ProductName = new byte[64];
	public byte[] SerialNumber = new byte[64];
	public OUT_USBINFO() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("UsbStatus", "VendorID", "ProductID", "DeviceRelease", "Manufacturer", "ProductName", "SerialNumber");
	}
	public OUT_USBINFO(short UsbStatus, short VendorID, short ProductID, short DeviceRelease, byte Manufacturer[], byte ProductName[], byte SerialNumber[]) {
		super();
		this.UsbStatus = UsbStatus;
		this.VendorID = VendorID;
		this.ProductID = ProductID;
		this.DeviceRelease = DeviceRelease;
		if ((Manufacturer.length != this.Manufacturer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Manufacturer = Manufacturer;
		if ((ProductName.length != this.ProductName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ProductName = ProductName;
		if ((SerialNumber.length != this.SerialNumber.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.SerialNumber = SerialNumber;
	}
	public OUT_USBINFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends OUT_USBINFO implements Structure.ByReference {
		
	};
	public static class ByValue extends OUT_USBINFO implements Structure.ByValue {
		
	};
}
