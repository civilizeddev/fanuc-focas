package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class out_dsinfo extends Structure {
	/** type */
	public short type;
	public short dummy;
	/** file num */
	public NativeLong fnum;
	/** all file num */
	public NativeLong total;
	/** remain(high) */
	public NativeLong remain_h;
	/** remain(low) */
	public NativeLong remain_l;
	/** current folder */
	public byte[] dir = new byte[256];
	public out_dsinfo() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("type", "dummy", "fnum", "total", "remain_h", "remain_l", "dir");
	}
	public out_dsinfo(short type, short dummy, NativeLong fnum, NativeLong total, NativeLong remain_h, NativeLong remain_l, byte dir[]) {
		super();
		this.type = type;
		this.dummy = dummy;
		this.fnum = fnum;
		this.total = total;
		this.remain_h = remain_h;
		this.remain_l = remain_l;
		if ((dir.length != this.dir.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dir = dir;
	}
	public out_dsinfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends out_dsinfo implements Structure.ByReference {
		
	};
	public static class ByValue extends out_dsinfo implements Structure.ByValue {
		
	};
}
