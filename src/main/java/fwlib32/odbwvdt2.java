package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbwvdt2 extends Structure {
	public short channel;
	public u_union u;
	public start_struct start;
	public stop_struct stop;
	public short t_cycle;
	public short adjust;
	public short[] data = new short[8192];
	public static class u_union extends Union {
		public w_struct w;
		public io_struct io;
		public static class w_struct extends Structure {
			public short axis;
			public byte kind;
			public w_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("axis", "kind");
			}
			public w_struct(short axis, byte kind) {
				super();
				this.axis = axis;
				this.kind = kind;
			}
			public w_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends w_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends w_struct implements Structure.ByValue {
				
			};
		};
		public static class io_struct extends Structure {
			public short no;
			public byte adr;
			public byte bit;
			public io_struct() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("no", "adr", "bit");
			}
			public io_struct(short no, byte adr, byte bit) {
				super();
				this.no = no;
				this.adr = adr;
				this.bit = bit;
			}
			public io_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends io_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends io_struct implements Structure.ByValue {
				
			};
		};
		public u_union() {
			super();
		}
		public u_union(w_struct w) {
			super();
			this.w = w;
			setType(w_struct.class);
		}
		public u_union(io_struct io) {
			super();
			this.io = io;
			setType(io_struct.class);
		}
		public u_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends u_union implements Structure.ByReference {
			
		};
		public static class ByValue extends u_union implements Structure.ByValue {
			
		};
	};
	public static class start_struct extends Structure {
		public byte year;
		public byte month;
		public byte day;
		public byte hour;
		public byte minute;
		public byte second;
		public start_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("year", "month", "day", "hour", "minute", "second");
		}
		public start_struct(byte year, byte month, byte day, byte hour, byte minute, byte second) {
			super();
			this.year = year;
			this.month = month;
			this.day = day;
			this.hour = hour;
			this.minute = minute;
			this.second = second;
		}
		public start_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends start_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends start_struct implements Structure.ByValue {
			
		};
	};
	public static class stop_struct extends Structure {
		public byte year;
		public byte month;
		public byte day;
		public byte hour;
		public byte minute;
		public byte second;
		public stop_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("year", "month", "day", "hour", "minute", "second");
		}
		public stop_struct(byte year, byte month, byte day, byte hour, byte minute, byte second) {
			super();
			this.year = year;
			this.month = month;
			this.day = day;
			this.hour = hour;
			this.minute = minute;
			this.second = second;
		}
		public stop_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends stop_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends stop_struct implements Structure.ByValue {
			
		};
	};
	public odbwvdt2() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("channel", "u", "start", "stop", "t_cycle", "adjust", "data");
	}
	public odbwvdt2(short channel, u_union u, start_struct start, stop_struct stop, short t_cycle, short adjust, short data[]) {
		super();
		this.channel = channel;
		this.u = u;
		this.start = start;
		this.stop = stop;
		this.t_cycle = t_cycle;
		this.adjust = adjust;
		if ((data.length != this.data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.data = data;
	}
	public odbwvdt2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbwvdt2 implements Structure.ByReference {
		
	};
	public static class ByValue extends odbwvdt2 implements Structure.ByValue {
		
	};
}
