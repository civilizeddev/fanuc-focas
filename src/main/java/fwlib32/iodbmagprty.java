package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbmagprty extends Structure {
	public short mag;
	public short reserve_s;
	public byte mag_info;
	public byte[] reserve = new byte[3];
	public short mt_line;
	public short mt_row;
	public NativeLong[] cstm = new NativeLong[4];
	public iodbmagprty() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("mag", "reserve_s", "mag_info", "reserve", "mt_line", "mt_row", "cstm");
	}
	public iodbmagprty(short mag, short reserve_s, byte mag_info, byte reserve[], short mt_line, short mt_row, NativeLong cstm[]) {
		super();
		this.mag = mag;
		this.reserve_s = reserve_s;
		this.mag_info = mag_info;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
		this.mt_line = mt_line;
		this.mt_row = mt_row;
		if ((cstm.length != this.cstm.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cstm = cstm;
	}
	public iodbmagprty(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbmagprty implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbmagprty implements Structure.ByValue {
		
	};
}
