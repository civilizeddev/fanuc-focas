package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IODBTLGS extends Structure {
	/** tool data1 */
	public NativeLong data1;
	/** tool data2 */
	public NativeLong data2;
	/** tool kind */
	public byte tooltype;
	/** attach */
	public byte install;
	/** tool name */
	public byte[] toolname = new byte[9];
	/** dummy */
	public byte dummy;
	public IODBTLGS() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("data1", "data2", "tooltype", "install", "toolname", "dummy");
	}
	public IODBTLGS(NativeLong data1, NativeLong data2, byte tooltype, byte install, byte toolname[], byte dummy) {
		super();
		this.data1 = data1;
		this.data2 = data2;
		this.tooltype = tooltype;
		this.install = install;
		if ((toolname.length != this.toolname.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.toolname = toolname;
		this.dummy = dummy;
	}
	public IODBTLGS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IODBTLGS implements Structure.ByReference {
		
	};
	public static class ByValue extends IODBTLGS implements Structure.ByValue {
		
	};
}
