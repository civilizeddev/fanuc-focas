package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodblagsl extends Structure {
	public short slct;
	public short ag_slt;
	public short agflow_slt;
	public short ag_press;
	public short ag_ready_t;
	public short[] reserve = new short[4];
	public iodblagsl() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("slct", "ag_slt", "agflow_slt", "ag_press", "ag_ready_t", "reserve");
	}
	public iodblagsl(short slct, short ag_slt, short agflow_slt, short ag_press, short ag_ready_t, short reserve[]) {
		super();
		this.slct = slct;
		this.ag_slt = ag_slt;
		this.agflow_slt = agflow_slt;
		this.ag_press = ag_press;
		this.ag_ready_t = ag_ready_t;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodblagsl(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodblagsl implements Structure.ByReference {
		
	};
	public static class ByValue extends iodblagsl implements Structure.ByValue {
		
	};
}
