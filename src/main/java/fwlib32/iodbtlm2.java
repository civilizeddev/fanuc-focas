package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtlm2 extends Structure {
	public short number;
	public short reserve;
	public item_union item;
	public static class item_union extends Union {
		public byte data1;
		public short data2;
		public NativeLong data4;
		public item_union() {
			super();
		}
		public item_union(byte data1) {
			super();
			this.data1 = data1;
			setType(Byte.TYPE);
		}
		public item_union(short data2) {
			super();
			this.data2 = data2;
			setType(Short.TYPE);
		}
		public item_union(NativeLong data4) {
			super();
			this.data4 = data4;
			setType(NativeLong.class);
		}
		public item_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends item_union implements Structure.ByReference {
			
		};
		public static class ByValue extends item_union implements Structure.ByValue {
			
		};
	};
	public iodbtlm2() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("number", "reserve", "item");
	}
	public iodbtlm2(short number, short reserve, item_union item) {
		super();
		this.number = number;
		this.reserve = reserve;
		this.item = item;
	}
	public iodbtlm2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtlm2 implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtlm2 implements Structure.ByValue {
		
	};
}
