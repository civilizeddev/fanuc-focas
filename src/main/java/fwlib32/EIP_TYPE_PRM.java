package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EIP_TYPE_PRM extends Structure {
	public short Type;
	public byte[] pad = new byte[2];
	public prm_union prm;
	public byte[] TagName = new byte[28];
	public byte[] pad2 = new byte[4];
	public static class prm_union extends Union {
		public pmc_struct pmc;
		public macro_struct macro;
		public static class pmc_struct extends Structure {
			public short Path;
			public short Addr;
			public NativeLong No;
			public NativeLong Size;
			public pmc_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("Path", "Addr", "No", "Size");
			}
			public pmc_struct(short Path, short Addr, NativeLong No, NativeLong Size) {
				super();
				this.Path = Path;
				this.Addr = Addr;
				this.No = No;
				this.Size = Size;
			}
			public pmc_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends pmc_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends pmc_struct implements Structure.ByValue {
				
			};
		};
		public static class macro_struct extends Structure {
			public short Path;
			public byte[] pad = new byte[2];
			public NativeLong No;
			public NativeLong Num;
			public macro_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("Path", "pad", "No", "Num");
			}
			public macro_struct(short Path, byte pad[], NativeLong No, NativeLong Num) {
				super();
				this.Path = Path;
				if ((pad.length != this.pad.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.pad = pad;
				this.No = No;
				this.Num = Num;
			}
			public macro_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends macro_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends macro_struct implements Structure.ByValue {
				
			};
		};
		public prm_union() {
			super();
		}
		public prm_union(pmc_struct pmc) {
			super();
			this.pmc = pmc;
			setType(pmc_struct.class);
		}
		public prm_union(macro_struct macro) {
			super();
			this.macro = macro;
			setType(macro_struct.class);
		}
		public prm_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends prm_union implements Structure.ByReference {
			
		};
		public static class ByValue extends prm_union implements Structure.ByValue {
			
		};
	};
	public EIP_TYPE_PRM() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Type", "pad", "prm", "TagName", "pad2");
	}
	public EIP_TYPE_PRM(short Type, byte pad[], prm_union prm, byte TagName[], byte pad2[]) {
		super();
		this.Type = Type;
		if ((pad.length != this.pad.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad = pad;
		this.prm = prm;
		if ((TagName.length != this.TagName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.TagName = TagName;
		if ((pad2.length != this.pad2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad2 = pad2;
	}
	public EIP_TYPE_PRM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EIP_TYPE_PRM implements Structure.ByReference {
		
	};
	public static class ByValue extends EIP_TYPE_PRM implements Structure.ByValue {
		
	};
}
