package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtllfd extends Structure {
	public short order;
	public short tool_num;
	public NativeLong life_count;
	public NativeLong rem_life;
	public NativeLong max_life;
	public NativeLong notice_life;
	public byte life_stat;
	public byte count_type;
	public short reserve;
	public iodbtllfd() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("order", "tool_num", "life_count", "rem_life", "max_life", "notice_life", "life_stat", "count_type", "reserve");
	}
	public iodbtllfd(short order, short tool_num, NativeLong life_count, NativeLong rem_life, NativeLong max_life, NativeLong notice_life, byte life_stat, byte count_type, short reserve) {
		super();
		this.order = order;
		this.tool_num = tool_num;
		this.life_count = life_count;
		this.rem_life = rem_life;
		this.max_life = max_life;
		this.notice_life = notice_life;
		this.life_stat = life_stat;
		this.count_type = count_type;
		this.reserve = reserve;
	}
	public iodbtllfd(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtllfd implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtllfd implements Structure.ByValue {
		
	};
}
