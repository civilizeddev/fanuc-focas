package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbrstrm extends Structure {
	public short grp_no;
	public short mem_no;
	public fwlib32.odbexem.m_code_struct[] m_code = new fwlib32.odbexem.m_code_struct[5];
	public static class m_code_struct extends Structure {
		public NativeLong no;
		public short flag;
		public m_code_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("no", "flag");
		}
		public m_code_struct(NativeLong no, short flag) {
			super();
			this.no = no;
			this.flag = flag;
		}
		public m_code_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends m_code_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends m_code_struct implements Structure.ByValue {
			
		};
	};
	public odbrstrm() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("grp_no", "mem_no", "m_code");
	}
	public odbrstrm(short grp_no, short mem_no, fwlib32.odbexem.m_code_struct m_code[]) {
		super();
		this.grp_no = grp_no;
		this.mem_no = mem_no;
		if ((m_code.length != this.m_code.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.m_code = m_code;
	}
	public odbrstrm(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbrstrm implements Structure.ByReference {
		
	};
	public static class ByValue extends odbrstrm implements Structure.ByValue {
		
	};
}
