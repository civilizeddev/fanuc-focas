package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odblpwofs extends Structure {
	public short pwrofs_set;
	public short pwrofs_coef;
	public short pwrofs_upper;
	public short pwrofs_max;
	public short pwrofs_min;
	public short pwrinofs_coef;
	public byte[] reserve = new byte[8];
	public odblpwofs() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("pwrofs_set", "pwrofs_coef", "pwrofs_upper", "pwrofs_max", "pwrofs_min", "pwrinofs_coef", "reserve");
	}
	public odblpwofs(short pwrofs_set, short pwrofs_coef, short pwrofs_upper, short pwrofs_max, short pwrofs_min, short pwrinofs_coef, byte reserve[]) {
		super();
		this.pwrofs_set = pwrofs_set;
		this.pwrofs_coef = pwrofs_coef;
		this.pwrofs_upper = pwrofs_upper;
		this.pwrofs_max = pwrofs_max;
		this.pwrofs_min = pwrofs_min;
		this.pwrinofs_coef = pwrinofs_coef;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public odblpwofs(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odblpwofs implements Structure.ByReference {
		
	};
	public static class ByValue extends odblpwofs implements Structure.ByValue {
		
	};
}
