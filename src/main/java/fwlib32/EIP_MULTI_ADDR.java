package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EIP_MULTI_ADDR extends Structure {
	public Prm_union Prm;
	public static class Prm_union extends Union {
		public EIP_UNUSE_ADDR Unuse;
		public EIP_PMC_ADDR Pmc;
		public Prm_union() {
			super();
		}
		public Prm_union(EIP_UNUSE_ADDR Unuse) {
			super();
			this.Unuse = Unuse;
			setType(EIP_UNUSE_ADDR.class);
		}
		public Prm_union(EIP_PMC_ADDR Pmc) {
			super();
			this.Pmc = Pmc;
			setType(EIP_PMC_ADDR.class);
		}
		public Prm_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends Prm_union implements Structure.ByReference {
			
		};
		public static class ByValue extends Prm_union implements Structure.ByValue {
			
		};
	};
	public EIP_MULTI_ADDR() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Prm");
	}
	public EIP_MULTI_ADDR(Prm_union Prm) {
		super();
		this.Prm = Prm;
	}
	public EIP_MULTI_ADDR(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EIP_MULTI_ADDR implements Structure.ByReference {
		
	};
	public static class ByValue extends EIP_MULTI_ADDR implements Structure.ByValue {
		
	};
}
