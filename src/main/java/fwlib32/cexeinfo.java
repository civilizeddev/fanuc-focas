package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cexeinfo extends Structure {
	/** condition */
	public NativeLong cond;
	/** cycle of start */
	public NativeLong cycle;
	/** number of start */
	public NativeLong count;
	/** execution time */
	public NativeLong time;
	/** dummy1 */
	public NativeLong dummy1;
	/** dummy2 */
	public NativeLong dummy2;
	/** dummy3 */
	public NativeLong dummy3;
	/** dummy4 */
	public NativeLong dummy4;
	public cexeinfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("cond", "cycle", "count", "time", "dummy1", "dummy2", "dummy3", "dummy4");
	}
	public cexeinfo(NativeLong cond, NativeLong cycle, NativeLong count, NativeLong time, NativeLong dummy1, NativeLong dummy2, NativeLong dummy3, NativeLong dummy4) {
		super();
		this.cond = cond;
		this.cycle = cycle;
		this.count = count;
		this.time = time;
		this.dummy1 = dummy1;
		this.dummy2 = dummy2;
		this.dummy3 = dummy3;
		this.dummy4 = dummy4;
	}
	public cexeinfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cexeinfo implements Structure.ByReference {
		
	};
	public static class ByValue extends cexeinfo implements Structure.ByValue {
		
	};
}
