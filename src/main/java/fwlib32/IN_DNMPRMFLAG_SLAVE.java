package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IN_DNMPRMFLAG_SLAVE extends Structure {
	public byte Communication;
	public byte DetailStatus;
	public byte Di;
	public byte DiSize;
	public byte Do;
	public byte DoSize;
	public byte[] reserved = new byte[10];
	public IN_DNMPRMFLAG_SLAVE() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("Communication", "DetailStatus", "Di", "DiSize", "Do", "DoSize", "reserved");
	}
	public IN_DNMPRMFLAG_SLAVE(byte Communication, byte DetailStatus, byte Di, byte DiSize, byte Do, byte DoSize, byte reserved[]) {
		super();
		this.Communication = Communication;
		this.DetailStatus = DetailStatus;
		this.Di = Di;
		this.DiSize = DiSize;
		this.Do = Do;
		this.DoSize = DoSize;
		if ((reserved.length != this.reserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved = reserved;
	}
	public IN_DNMPRMFLAG_SLAVE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IN_DNMPRMFLAG_SLAVE implements Structure.ByReference {
		
	};
	public static class ByValue extends IN_DNMPRMFLAG_SLAVE implements Structure.ByValue {
		
	};
}
