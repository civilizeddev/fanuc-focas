package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbrct_item extends Structure {
	public short item_num;
	public byte type;
	public byte axsp_num;
	public byte ptn_num;
	public byte dummy;
	public short attr;
	public iodbrct_item.data_info[] ptn = new iodbrct_item.data_info[6];
	public static class data_info extends Structure {
		public byte enable;
		public byte[] dummy2 = new byte[7];
		public uParam_union uParam;
		public static class uParam_union extends Union {
			public byte bdata;
			public byte cdata;
			public short idata;
			public NativeLong ldata;
			public realprm rdata;
			public byte[] bdatas = new byte[32];
			public byte[] cdatas = new byte[32];
			public short[] idatas = new short[32];
			public NativeLong[] ldatas = new NativeLong[32];
			public realprm[] rdatas = new realprm[32];
			public uParam_union() {
				super();
			}
			public uParam_union(byte bdata_or_cdata) {
				super();
				this.cdata = this.bdata = bdata_or_cdata;
				setType(Byte.TYPE);
			}
			public uParam_union(short idata) {
				super();
				this.idata = idata;
				setType(Short.TYPE);
			}
			public uParam_union(NativeLong ldata) {
				super();
				this.ldata = ldata;
				setType(NativeLong.class);
			}
			public uParam_union(realprm rdata) {
				super();
				this.rdata = rdata;
				setType(realprm.class);
			}
			public uParam_union(byte bdatas_or_cdatas[]) {
				super();
				if ((bdatas_or_cdatas.length != this.bdatas_or_cdatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.cdatas = this.bdatas = bdatas_or_cdatas;
				setType(byte[].class);
			}
			public uParam_union(short idatas[]) {
				super();
				if ((idatas.length != this.idatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.idatas = idatas;
				setType(short[].class);
			}
			public uParam_union(NativeLong ldatas[]) {
				super();
				if ((ldatas.length != this.ldatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.ldatas = ldatas;
				setType(NativeLong[].class);
			}
			public uParam_union(realprm rdatas[]) {
				super();
				if ((rdatas.length != this.rdatas.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.rdatas = rdatas;
				setType(realprm[].class);
			}
			public uParam_union(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends uParam_union implements Structure.ByReference {
				
			};
			public static class ByValue extends uParam_union implements Structure.ByValue {
				
			};
		};
		public data_info() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("enable", "dummy2", "uParam");
		}
		public data_info(byte enable, byte dummy2[], uParam_union uParam) {
			super();
			this.enable = enable;
			if ((dummy2.length != this.dummy2.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.dummy2 = dummy2;
			this.uParam = uParam;
		}
		public data_info(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_info implements Structure.ByReference {
			
		};
		public static class ByValue extends data_info implements Structure.ByValue {
			
		};
	};
	public iodbrct_item() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("item_num", "type", "axsp_num", "ptn_num", "dummy", "attr", "ptn");
	}
	public iodbrct_item(short item_num, byte type, byte axsp_num, byte ptn_num, byte dummy, short attr, iodbrct_item.data_info ptn[]) {
		super();
		this.item_num = item_num;
		this.type = type;
		this.axsp_num = axsp_num;
		this.ptn_num = ptn_num;
		this.dummy = dummy;
		this.attr = attr;
		if ((ptn.length != this.ptn.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ptn = ptn;
	}
	public iodbrct_item(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbrct_item implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbrct_item implements Structure.ByValue {
		
	};
}
