package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbmva extends Structure {
	/** synchronized object */
	public short sync_obj;
	/** path */
	public short path;
	public odbmva.lin_ax_struct[] lin_ax = new odbmva.lin_ax_struct[3];
	public odbmva.rot_ax_struct[] rot_ax = new odbmva.rot_ax_struct[2];
	public odbmva.rot_ele_struct[] rot_ele = new odbmva.rot_ele_struct[6];
	public static class lin_ax_struct extends Structure {
		/** axis number */
		public short axis_no;
		/** moving direction */
		public short mov_dir;
		public lin_ax_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("axis_no", "mov_dir");
		}
		public lin_ax_struct(short axis_no, short mov_dir) {
			super();
			this.axis_no = axis_no;
			this.mov_dir = mov_dir;
		}
		public lin_ax_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends lin_ax_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends lin_ax_struct implements Structure.ByValue {
			
		};
	};
	public static class rot_ax_struct extends Structure {
		/** axis number */
		public short axis_no;
		/** rotating direction */
		public short c_ax_dir;
		/** rotating position */
		public NativeLong[] c_pos = new NativeLong[3];
		/** inclination angle */
		public NativeLong inc_ang;
		/** rotational direction */
		public short rot_dir;
		/** reserve */
		public short reserve;
		public rot_ax_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("axis_no", "c_ax_dir", "c_pos", "inc_ang", "rot_dir", "reserve");
		}
		public rot_ax_struct(short axis_no, short c_ax_dir, NativeLong c_pos[], NativeLong inc_ang, short rot_dir, short reserve) {
			super();
			this.axis_no = axis_no;
			this.c_ax_dir = c_ax_dir;
			if ((c_pos.length != this.c_pos.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.c_pos = c_pos;
			this.inc_ang = inc_ang;
			this.rot_dir = rot_dir;
			this.reserve = reserve;
		}
		public rot_ax_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rot_ax_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends rot_ax_struct implements Structure.ByValue {
			
		};
	};
	public static class rot_ele_struct extends Structure {
		/** master rotating axis */
		public short master;
		/** slave rotating axis */
		public short slave;
		public rot_ele_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("master", "slave");
		}
		public rot_ele_struct(short master, short slave) {
			super();
			this.master = master;
			this.slave = slave;
		}
		public rot_ele_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rot_ele_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends rot_ele_struct implements Structure.ByValue {
			
		};
	};
	public odbmva() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("sync_obj", "path", "lin_ax", "rot_ax", "rot_ele");
	}
	public odbmva(short sync_obj, short path, odbmva.lin_ax_struct lin_ax[], odbmva.rot_ax_struct rot_ax[], odbmva.rot_ele_struct rot_ele[]) {
		super();
		this.sync_obj = sync_obj;
		this.path = path;
		if ((lin_ax.length != this.lin_ax.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.lin_ax = lin_ax;
		if ((rot_ax.length != this.rot_ax.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rot_ax = rot_ax;
		if ((rot_ele.length != this.rot_ele.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rot_ele = rot_ele;
	}
	public odbmva(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbmva implements Structure.ByReference {
		
	};
	public static class ByValue extends odbmva implements Structure.ByValue {
		
	};
}
