package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbtlname extends Structure {
	public sp_name_struct sp_name;
	public wt_name_struct wt_name;
	public static class sp_name_struct extends Structure {
		public byte[] sp_pos1 = new byte[5];
		public byte[] sp_pos2 = new byte[5];
		public byte[] sp_pos3 = new byte[5];
		public byte[] sp_pos4 = new byte[5];
		public sp_name_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("sp_pos1", "sp_pos2", "sp_pos3", "sp_pos4");
		}
		public sp_name_struct(byte sp_pos1[], byte sp_pos2[], byte sp_pos3[], byte sp_pos4[]) {
			super();
			if ((sp_pos1.length != this.sp_pos1.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.sp_pos1 = sp_pos1;
			if ((sp_pos2.length != this.sp_pos2.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.sp_pos2 = sp_pos2;
			if ((sp_pos3.length != this.sp_pos3.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.sp_pos3 = sp_pos3;
			if ((sp_pos4.length != this.sp_pos4.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.sp_pos4 = sp_pos4;
		}
		public sp_name_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends sp_name_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends sp_name_struct implements Structure.ByValue {
			
		};
	};
	public static class wt_name_struct extends Structure {
		public byte[] wt_pos1 = new byte[5];
		public byte[] wt_pos2 = new byte[5];
		public byte[] wt_pos3 = new byte[5];
		public byte[] wt_pos4 = new byte[5];
		public wt_name_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("wt_pos1", "wt_pos2", "wt_pos3", "wt_pos4");
		}
		public wt_name_struct(byte wt_pos1[], byte wt_pos2[], byte wt_pos3[], byte wt_pos4[]) {
			super();
			if ((wt_pos1.length != this.wt_pos1.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.wt_pos1 = wt_pos1;
			if ((wt_pos2.length != this.wt_pos2.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.wt_pos2 = wt_pos2;
			if ((wt_pos3.length != this.wt_pos3.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.wt_pos3 = wt_pos3;
			if ((wt_pos4.length != this.wt_pos4.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.wt_pos4 = wt_pos4;
		}
		public wt_name_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends wt_name_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends wt_name_struct implements Structure.ByValue {
			
		};
	};
	public iodbtlname() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("sp_name", "wt_name");
	}
	public iodbtlname(sp_name_struct sp_name, wt_name_struct wt_name) {
		super();
		this.sp_name = sp_name;
		this.wt_name = wt_name;
	}
	public iodbtlname(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbtlname implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbtlname implements Structure.ByValue {
		
	};
}
