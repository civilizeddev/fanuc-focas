package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class dcscrsalm extends Structure {
	public NativeLong existFlag;
	public NativeLong pmc_no;
	public pmc_struct pmc;
	public dcspmc_struct dcspmc;
	public static abstract class pmc_struct extends Structure {
		public byte[] pmc_adr = new byte[8];
		/** Conversion Error : null */
		public pmc_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("pmc_adr");
		}
		public pmc_struct(byte pmc_adr[]) {
			super();
			if ((pmc_adr.length != this.pmc_adr.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.pmc_adr = pmc_adr;
		}
		public pmc_struct(Pointer peer) {
			super(peer);
		}
		public static abstract class ByReference extends pmc_struct implements Structure.ByReference {
			
		};
		public static abstract class ByValue extends pmc_struct implements Structure.ByValue {
			
		};
	};
	public static abstract class dcspmc_struct extends Structure {
		public byte[] pmc_adr = new byte[8];
		/** Conversion Error : null */
		public dcspmc_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("pmc_adr");
		}
		public dcspmc_struct(byte pmc_adr[]) {
			super();
			if ((pmc_adr.length != this.pmc_adr.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.pmc_adr = pmc_adr;
		}
		public dcspmc_struct(Pointer peer) {
			super(peer);
		}
		public static abstract class ByReference extends dcspmc_struct implements Structure.ByReference {
			
		};
		public static abstract class ByValue extends dcspmc_struct implements Structure.ByValue {
			
		};
	};
	public dcscrsalm() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("existFlag", "pmc_no", "pmc", "dcspmc");
	}
	public dcscrsalm(NativeLong existFlag, NativeLong pmc_no, pmc_struct pmc, dcspmc_struct dcspmc) {
		super();
		this.existFlag = existFlag;
		this.pmc_no = pmc_no;
		this.pmc = pmc;
		this.dcspmc = dcspmc;
	}
	public dcscrsalm(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends dcscrsalm implements Structure.ByReference {
		
	};
	public static class ByValue extends dcscrsalm implements Structure.ByValue {
		
	};
}
