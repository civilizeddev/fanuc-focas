package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbahdck extends Structure {
	public short dat_path;
	public fwlib32.odbparaif.info_struct[] info = new fwlib32.odbparaif.info_struct[10];
	public static class info_struct extends Structure {
		public short stat;
		public short data;
		public info_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("stat", "data");
		}
		public info_struct(short stat, short data) {
			super();
			this.stat = stat;
			this.data = data;
		}
		public info_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends info_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends info_struct implements Structure.ByValue {
			
		};
	};
	public odbahdck() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("dat_path", "info");
	}
	public odbahdck(short dat_path, fwlib32.odbparaif.info_struct info[]) {
		super();
		this.dat_path = dat_path;
		if ((info.length != this.info.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.info = info;
	}
	public odbahdck(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbahdck implements Structure.ByReference {
		
	};
	public static class ByValue extends odbahdck implements Structure.ByValue {
		
	};
}
