package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbrbcomset extends Structure {
	public iodbrbtopsig di_top;
	public iodbrbtopsig do_top;
	public iodbrbpowersig power_on;
	public short di_offset;
	public short do_offset;
	public byte property;
	public byte[] reserve = new byte[3];
	public iodbrbcomset() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("di_top", "do_top", "power_on", "di_offset", "do_offset", "property", "reserve");
	}
	public iodbrbcomset(iodbrbtopsig di_top, iodbrbtopsig do_top, iodbrbpowersig power_on, short di_offset, short do_offset, byte property, byte reserve[]) {
		super();
		this.di_top = di_top;
		this.do_top = do_top;
		this.power_on = power_on;
		this.di_offset = di_offset;
		this.do_offset = do_offset;
		this.property = property;
		if ((reserve.length != this.reserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserve = reserve;
	}
	public iodbrbcomset(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbrbcomset implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbrbcomset implements Structure.ByValue {
		
	};
}
