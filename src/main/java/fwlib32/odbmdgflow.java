package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbmdgflow extends Structure {
	public short msgidx;
	public short yesidx;
	public short noidx;
	public short reserved;
	public byte[] message = new byte[400];
	public short detail;
	public short operate;
	public odbmdgflow() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("msgidx", "yesidx", "noidx", "reserved", "message", "detail", "operate");
	}
	public odbmdgflow(short msgidx, short yesidx, short noidx, short reserved, byte message[], short detail, short operate) {
		super();
		this.msgidx = msgidx;
		this.yesidx = yesidx;
		this.noidx = noidx;
		this.reserved = reserved;
		if ((message.length != this.message.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.message = message;
		this.detail = detail;
		this.operate = operate;
	}
	public odbmdgflow(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbmdgflow implements Structure.ByReference {
		
	};
	public static class ByValue extends odbmdgflow implements Structure.ByValue {
		
	};
}
