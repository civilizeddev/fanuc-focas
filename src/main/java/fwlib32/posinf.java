package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class posinf extends Structure {
	public pos_struct pos;
	public feed_struct feed;
	public static class pos_struct extends Structure {
		public short prec_pntr;
		public short prec_time;
		public NativeLong[] data = new NativeLong[2];
		public short dec;
		public short unit;
		public pos_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("prec_pntr", "prec_time", "data", "dec", "unit");
		}
		public pos_struct(short prec_pntr, short prec_time, NativeLong data[], short dec, short unit) {
			super();
			this.prec_pntr = prec_pntr;
			this.prec_time = prec_time;
			if ((data.length != this.data.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.data = data;
			this.dec = dec;
			this.unit = unit;
		}
		public pos_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends pos_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends pos_struct implements Structure.ByValue {
			
		};
	};
	public static class feed_struct extends Structure {
		public NativeLong data;
		public short dec;
		public short unit;
		public feed_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("data", "dec", "unit");
		}
		public feed_struct(NativeLong data, short dec, short unit) {
			super();
			this.data = data;
			this.dec = dec;
			this.unit = unit;
		}
		public feed_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends feed_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends feed_struct implements Structure.ByValue {
			
		};
	};
	public posinf() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("pos", "feed");
	}
	public posinf(pos_struct pos, feed_struct feed) {
		super();
		this.pos = pos;
		this.feed = feed;
	}
	public posinf(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends posinf implements Structure.ByReference {
		
	};
	public static class ByValue extends posinf implements Structure.ByValue {
		
	};
}
