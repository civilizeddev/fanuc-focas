package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odb3dcd extends Structure {
	public short mode;
	public short dno;
	public short[] cd_axes = new short[3];
	public NativeLong[] center = new NativeLong[((2) * (3))];
	public NativeLong[] direct = new NativeLong[((2) * (3))];
	public NativeLong[] angle = new NativeLong[2];
	public odb3dcd() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("mode", "dno", "cd_axes", "center", "direct", "angle");
	}
	public odb3dcd(short mode, short dno, short cd_axes[], NativeLong center[], NativeLong direct[], NativeLong angle[]) {
		super();
		this.mode = mode;
		this.dno = dno;
		if ((cd_axes.length != this.cd_axes.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cd_axes = cd_axes;
		if ((center.length != this.center.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.center = center;
		if ((direct.length != this.direct.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.direct = direct;
		if ((angle.length != this.angle.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.angle = angle;
	}
	public odb3dcd(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odb3dcd implements Structure.ByReference {
		
	};
	public static class ByValue extends odb3dcd implements Structure.ByValue {
		
	};
}
