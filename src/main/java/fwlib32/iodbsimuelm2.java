package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class iodbsimuelm2 extends Structure {
	public byte type;
	public byte rot_w;
	public byte type2;
	public byte plane;
	public NativeLong tcode;
	public data_union data;
	public byte dm_type;
	public byte cssc_md;
	public NativeLong[] dm_x = new NativeLong[3];
	public NativeLong[] dm_y = new NativeLong[3];
	public NativeLong[] dm_z = new NativeLong[3];
	public NativeLong[] cnt_x = new NativeLong[3];
	public NativeLong[] cord = new NativeLong[6];
	public byte tlchng;
	public byte fd_type;
	public NativeLong mcode;
	public short dummy4;
	public NativeLong cylndr;
	public NativeLong aux;
	public NativeLong dcode;
	public NativeLong smax;
	public NativeLong dwell;
	public NativeLong fcode;
	public NativeLong scode;
	public byte nummcd;
	public byte fcddec;
	public NativeLong shift;
	public byte fbsft;
	public byte tilt;
	public short dummy6;
	public NativeLong mcode2;
	public NativeLong mcode3;
	public NativeLong mcode4;
	public NativeLong mcode5;
	public NativeLong[] reserve = new NativeLong[10];
	public static class data_union extends Union {
		public rapid_struct rapid;
		public line_struct line;
		public arc_struct arc;
		public thrd1_struct thrd1;
		public thrd2_struct thrd2;
		public dummy_d_struct dummy_d;
		public static class rapid_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[8];
			public rapid_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p");
			}
			public rapid_struct(NativeLong mv_p[]) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
			}
			public rapid_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rapid_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rapid_struct implements Structure.ByValue {
				
			};
		};
		public static class line_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[8];
			public line_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p");
			}
			public line_struct(NativeLong mv_p[]) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
			}
			public line_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends line_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends line_struct implements Structure.ByValue {
				
			};
		};
		public static class arc_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[8];
			public NativeLong[] cnt_p = new NativeLong[4];
			public arc_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p", "cnt_p");
			}
			public arc_struct(NativeLong mv_p[], NativeLong cnt_p[]) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
				if ((cnt_p.length != this.cnt_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.cnt_p = cnt_p;
			}
			public arc_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends arc_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends arc_struct implements Structure.ByValue {
				
			};
		};
		public static class thrd1_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[8];
			public NativeLong ptch;
			public thrd1_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p", "ptch");
			}
			public thrd1_struct(NativeLong mv_p[], NativeLong ptch) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
				this.ptch = ptch;
			}
			public thrd1_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends thrd1_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends thrd1_struct implements Structure.ByValue {
				
			};
		};
		public static class thrd2_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[8];
			public NativeLong ptch;
			public NativeLong[] mv_p2 = new NativeLong[2];
			public thrd2_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p", "ptch", "mv_p2");
			}
			public thrd2_struct(NativeLong mv_p[], NativeLong ptch, NativeLong mv_p2[]) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
				this.ptch = ptch;
				if ((mv_p2.length != this.mv_p2.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p2 = mv_p2;
			}
			public thrd2_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends thrd2_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends thrd2_struct implements Structure.ByValue {
				
			};
		};
		public static class dummy_d_struct extends Structure {
			public NativeLong[] mv_p = new NativeLong[16];
			public dummy_d_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("mv_p");
			}
			public dummy_d_struct(NativeLong mv_p[]) {
				super();
				if ((mv_p.length != this.mv_p.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.mv_p = mv_p;
			}
			public dummy_d_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends dummy_d_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends dummy_d_struct implements Structure.ByValue {
				
			};
		};
		public data_union() {
			super();
		}
		public data_union(rapid_struct rapid) {
			super();
			this.rapid = rapid;
			setType(rapid_struct.class);
		}
		public data_union(line_struct line) {
			super();
			this.line = line;
			setType(line_struct.class);
		}
		public data_union(arc_struct arc) {
			super();
			this.arc = arc;
			setType(arc_struct.class);
		}
		public data_union(thrd1_struct thrd1) {
			super();
			this.thrd1 = thrd1;
			setType(thrd1_struct.class);
		}
		public data_union(thrd2_struct thrd2) {
			super();
			this.thrd2 = thrd2;
			setType(thrd2_struct.class);
		}
		public data_union(dummy_d_struct dummy_d) {
			super();
			this.dummy_d = dummy_d;
			setType(dummy_d_struct.class);
		}
		public data_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public iodbsimuelm2() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("type", "rot_w", "type2", "plane", "tcode", "data", "dm_type", "cssc_md", "dm_x", "dm_y", "dm_z", "cnt_x", "cord", "tlchng", "fd_type", "mcode", "dummy4", "cylndr", "aux", "dcode", "smax", "dwell", "fcode", "scode", "nummcd", "fcddec", "shift", "fbsft", "tilt", "dummy6", "mcode2", "mcode3", "mcode4", "mcode5", "reserve");
	}
	public iodbsimuelm2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends iodbsimuelm2 implements Structure.ByReference {
		
	};
	public static class ByValue extends iodbsimuelm2 implements Structure.ByValue {
		
	};
}
