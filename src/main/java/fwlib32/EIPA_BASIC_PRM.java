package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EIPA_BASIC_PRM extends Structure {
	public EIP_COMMON_PRM Common;
	public byte Option2;
	public byte AllocMax;
	public short ConnectMax;
	public short RPI_Min;
	public short RPI_Max;
	public Status_struct Status;
	public NativeLong StatusSize;
	public static class Status_struct extends Structure {
		public short Path;
		public short Addr;
		public NativeLong No;
		public Status_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("Path", "Addr", "No");
		}
		public Status_struct(short Path, short Addr, NativeLong No) {
			super();
			this.Path = Path;
			this.Addr = Addr;
			this.No = No;
		}
		public Status_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends Status_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends Status_struct implements Structure.ByValue {
			
		};
	};
	public EIPA_BASIC_PRM() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Common", "Option2", "AllocMax", "ConnectMax", "RPI_Min", "RPI_Max", "Status", "StatusSize");
	}
	public EIPA_BASIC_PRM(EIP_COMMON_PRM Common, byte Option2, byte AllocMax, short ConnectMax, short RPI_Min, short RPI_Max, Status_struct Status, NativeLong StatusSize) {
		super();
		this.Common = Common;
		this.Option2 = Option2;
		this.AllocMax = AllocMax;
		this.ConnectMax = ConnectMax;
		this.RPI_Min = RPI_Min;
		this.RPI_Max = RPI_Max;
		this.Status = Status;
		this.StatusSize = StatusSize;
	}
	public EIPA_BASIC_PRM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EIPA_BASIC_PRM implements Structure.ByReference {
		
	};
	public static class ByValue extends EIPA_BASIC_PRM implements Structure.ByValue {
		
	};
}
