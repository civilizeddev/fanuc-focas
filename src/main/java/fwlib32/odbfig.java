package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbfig extends Structure {
	/** figure type */
	public NativeLong fig_type;
	public fig_union fig;
	/** figure number */
	public short fig_no;
	/** numetrical unit */
	public byte n_unit;
	/** figure form flag */
	public byte cb_form;
	public static class fig_union extends Union {
		public par_struct par;
		public cyl_struct cyl;
		public pln_struct pln;
		public static class par_struct extends Structure {
			/** reference vertex */
			public NativeLong[] ref_vtx = new NativeLong[3];
			/** adjacence vertex1 */
			public NativeLong[] adj_vtx1 = new NativeLong[3];
			/** adjacence vertex2 */
			public NativeLong[] adj_vtx2 = new NativeLong[3];
			/** adjacence vertex3 */
			public NativeLong[] adj_vtx3 = new NativeLong[3];
			public par_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("ref_vtx", "adj_vtx1", "adj_vtx2", "adj_vtx3");
			}
			public par_struct(NativeLong ref_vtx[], NativeLong adj_vtx1[], NativeLong adj_vtx2[], NativeLong adj_vtx3[]) {
				super();
				if ((ref_vtx.length != this.ref_vtx.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.ref_vtx = ref_vtx;
				if ((adj_vtx1.length != this.adj_vtx1.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.adj_vtx1 = adj_vtx1;
				if ((adj_vtx2.length != this.adj_vtx2.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.adj_vtx2 = adj_vtx2;
				if ((adj_vtx3.length != this.adj_vtx3.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.adj_vtx3 = adj_vtx3;
			}
			public par_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends par_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends par_struct implements Structure.ByValue {
				
			};
		};
		public static class cyl_struct extends Structure {
			/** start point */
			public NativeLong[] sta_pnt = new NativeLong[3];
			/** end point */
			public NativeLong[] end_pnt = new NativeLong[3];
			/** radius */
			public NativeLong radius;
			public cyl_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("sta_pnt", "end_pnt", "radius");
			}
			public cyl_struct(NativeLong sta_pnt[], NativeLong end_pnt[], NativeLong radius) {
				super();
				if ((sta_pnt.length != this.sta_pnt.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.sta_pnt = sta_pnt;
				if ((end_pnt.length != this.end_pnt.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.end_pnt = end_pnt;
				this.radius = radius;
			}
			public cyl_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends cyl_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends cyl_struct implements Structure.ByValue {
				
			};
		};
		public static class pln_struct extends Structure {
			/** optional point on plane */
			public NativeLong[] point = new NativeLong[3];
			/** vertical vector */
			public NativeLong[] vect = new NativeLong[3];
			public pln_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("point", "vect");
			}
			public pln_struct(NativeLong point[], NativeLong vect[]) {
				super();
				if ((point.length != this.point.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.point = point;
				if ((vect.length != this.vect.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.vect = vect;
			}
			public pln_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends pln_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends pln_struct implements Structure.ByValue {
				
			};
		};
		public fig_union() {
			super();
		}
		public fig_union(par_struct par) {
			super();
			this.par = par;
			setType(par_struct.class);
		}
		public fig_union(cyl_struct cyl) {
			super();
			this.cyl = cyl;
			setType(cyl_struct.class);
		}
		public fig_union(pln_struct pln) {
			super();
			this.pln = pln;
			setType(pln_struct.class);
		}
		public fig_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends fig_union implements Structure.ByReference {
			
		};
		public static class ByValue extends fig_union implements Structure.ByValue {
			
		};
	};
	public odbfig() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("fig_type", "fig", "fig_no", "n_unit", "cb_form");
	}
	public odbfig(NativeLong fig_type, fig_union fig, short fig_no, byte n_unit, byte cb_form) {
		super();
		this.fig_type = fig_type;
		this.fig = fig;
		this.fig_no = fig_no;
		this.n_unit = n_unit;
		this.cb_form = cb_form;
	}
	public odbfig(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbfig implements Structure.ByReference {
		
	};
	public static class ByValue extends odbfig implements Structure.ByValue {
		
	};
}
