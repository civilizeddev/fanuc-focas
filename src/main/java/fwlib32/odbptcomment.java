package fwlib32;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbptcomment extends Structure {
	public NativeLong t_code;
	public byte comment_count;
	public byte pto_mode;
	public byte[] dummy1 = new byte[2];
	public byte[] comment = new byte[((10) * (32))];
	public odbptcomment() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("t_code", "comment_count", "pto_mode", "dummy1", "comment");
	}
	public odbptcomment(NativeLong t_code, byte comment_count, byte pto_mode, byte dummy1[], byte comment[]) {
		super();
		this.t_code = t_code;
		this.comment_count = comment_count;
		this.pto_mode = pto_mode;
		if ((dummy1.length != this.dummy1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dummy1 = dummy1;
		if ((comment.length != this.comment.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.comment = comment;
	}
	public odbptcomment(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbptcomment implements Structure.ByReference {
		
	};
	public static class ByValue extends odbptcomment implements Structure.ByValue {
		
	};
}
