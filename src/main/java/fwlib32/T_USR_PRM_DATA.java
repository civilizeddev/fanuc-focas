package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class T_USR_PRM_DATA extends Structure {
	public short user_prm_data_len;
	public byte[] user_prm_data = new byte[201];
	public byte pad;
	public T_USR_PRM_DATA() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("user_prm_data_len", "user_prm_data", "pad");
	}
	public T_USR_PRM_DATA(short user_prm_data_len, byte user_prm_data[], byte pad) {
		super();
		this.user_prm_data_len = user_prm_data_len;
		if ((user_prm_data.length != this.user_prm_data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.user_prm_data = user_prm_data;
		this.pad = pad;
	}
	public T_USR_PRM_DATA(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends T_USR_PRM_DATA implements Structure.ByReference {
		
	};
	public static class ByValue extends T_USR_PRM_DATA implements Structure.ByValue {
		
	};
}
