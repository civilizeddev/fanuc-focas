package fwlib32;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class odbhis extends Structure {
	/** start number */
	public short s_no;
	/** dummy */
	public short type;
	/** end number */
	public short e_no;
	public fwlib32.iodbctprm.data_union[] data = new fwlib32.iodbctprm.data_union[10];
	public static class data_union extends Union {
		public rec_alm_struct rec_alm;
		public rec_mdi_struct rec_mdi;
		public rec_sgn_struct rec_sgn;
		public rec_date_struct rec_date;
		public rec_time_struct rec_time;
		public static class rec_alm_struct extends Structure {
			/** record type */
			public short rec_type;
			/** alarm group */
			public short alm_grp;
			/** alarm number */
			public short alm_no;
			/** axis number */
			public byte axis_no;
			public byte dummy;
			public rec_alm_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("rec_type", "alm_grp", "alm_no", "axis_no", "dummy");
			}
			public rec_alm_struct(short rec_type, short alm_grp, short alm_no, byte axis_no, byte dummy) {
				super();
				this.rec_type = rec_type;
				this.alm_grp = alm_grp;
				this.alm_no = alm_no;
				this.axis_no = axis_no;
				this.dummy = dummy;
			}
			public rec_alm_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_alm_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_alm_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_mdi_struct extends Structure {
			/** record type */
			public short rec_type;
			/** key code */
			public byte key_code;
			/** power on flag */
			public byte pw_flag;
			public byte[] dummy = new byte[4];
			public rec_mdi_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("rec_type", "key_code", "pw_flag", "dummy");
			}
			public rec_mdi_struct(short rec_type, byte key_code, byte pw_flag, byte dummy[]) {
				super();
				this.rec_type = rec_type;
				this.key_code = key_code;
				this.pw_flag = pw_flag;
				if ((dummy.length != this.dummy.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.dummy = dummy;
			}
			public rec_mdi_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_mdi_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_mdi_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_sgn_struct extends Structure {
			/** record type */
			public short rec_type;
			/** signal name */
			public byte sig_name;
			/** old signal bit pattern */
			public byte sig_old;
			/** new signal bit pattern */
			public byte sig_new;
			public byte dummy;
			/** signal number */
			public short sig_no;
			public rec_sgn_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("rec_type", "sig_name", "sig_old", "sig_new", "dummy", "sig_no");
			}
			public rec_sgn_struct(short rec_type, byte sig_name, byte sig_old, byte sig_new, byte dummy, short sig_no) {
				super();
				this.rec_type = rec_type;
				this.sig_name = sig_name;
				this.sig_old = sig_old;
				this.sig_new = sig_new;
				this.dummy = dummy;
				this.sig_no = sig_no;
			}
			public rec_sgn_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_sgn_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_sgn_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_date_struct extends Structure {
			/** record type */
			public short rec_type;
			/** year */
			public byte year;
			/** month */
			public byte month;
			/** day */
			public byte day;
			/** power on flag */
			public byte pw_flag;
			public byte[] dummy = new byte[2];
			public rec_date_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("rec_type", "year", "month", "day", "pw_flag", "dummy");
			}
			public rec_date_struct(short rec_type, byte year, byte month, byte day, byte pw_flag, byte dummy[]) {
				super();
				this.rec_type = rec_type;
				this.year = year;
				this.month = month;
				this.day = day;
				this.pw_flag = pw_flag;
				if ((dummy.length != this.dummy.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.dummy = dummy;
			}
			public rec_date_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_date_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_date_struct implements Structure.ByValue {
				
			};
		};
		public static class rec_time_struct extends Structure {
			/** record flag */
			public short rec_type;
			/** hour */
			public byte hour;
			/** minute */
			public byte minute;
			/** second */
			public byte second;
			/** power on flag */
			public byte pw_flag;
			public byte[] dummy = new byte[2];
			public rec_time_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("rec_type", "hour", "minute", "second", "pw_flag", "dummy");
			}
			public rec_time_struct(short rec_type, byte hour, byte minute, byte second, byte pw_flag, byte dummy[]) {
				super();
				this.rec_type = rec_type;
				this.hour = hour;
				this.minute = minute;
				this.second = second;
				this.pw_flag = pw_flag;
				if ((dummy.length != this.dummy.length)) 
					throw new IllegalArgumentException("Wrong array size !");
				this.dummy = dummy;
			}
			public rec_time_struct(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends rec_time_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends rec_time_struct implements Structure.ByValue {
				
			};
		};
		public data_union() {
			super();
		}
		public data_union(rec_alm_struct rec_alm) {
			super();
			this.rec_alm = rec_alm;
			setType(rec_alm_struct.class);
		}
		public data_union(rec_mdi_struct rec_mdi) {
			super();
			this.rec_mdi = rec_mdi;
			setType(rec_mdi_struct.class);
		}
		public data_union(rec_sgn_struct rec_sgn) {
			super();
			this.rec_sgn = rec_sgn;
			setType(rec_sgn_struct.class);
		}
		public data_union(rec_date_struct rec_date) {
			super();
			this.rec_date = rec_date;
			setType(rec_date_struct.class);
		}
		public data_union(rec_time_struct rec_time) {
			super();
			this.rec_time = rec_time;
			setType(rec_time_struct.class);
		}
		public data_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public odbhis() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("s_no", "type", "e_no", "data");
	}
	public odbhis(short s_no, short type, short e_no, fwlib32.iodbctprm.data_union data[]) {
		super();
		this.s_no = s_no;
		this.type = type;
		this.e_no = e_no;
		if ((data.length != this.data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.data = data;
	}
	public odbhis(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends odbhis implements Structure.ByReference {
		
	};
	public static class ByValue extends odbhis implements Structure.ByValue {
		
	};
}
